<?php

declare(strict_types=1);

namespace App\Console\Commands;

use Tests\Fixtures\RealWorldVulnerableContracts;
use Illuminate\Console\Command;

class VulnerabilityTestCommand extends Command
{
    protected $signature = 'vulnerability:regression 
                           {--contract= : Specific contract to test}
                           {--category= : Test category}
                           {--format=table : Output format}';

    protected $description = 'Run vulnerability regression tests';

    public function handle(): int
    {
        $this->info('🔍 Vulnerability Regression Test Suite');
        
        $testCases = RealWorldVulnerableContracts::getAllTestCases();
        $results = [];

        foreach ($testCases as $testCase) {
            $result = $this->testContract($testCase);
            $results[] = $result;
        }

        $this->displayResults($results);
        $this->showSummary($results);

        return Command::SUCCESS;
    }

    private function testContract(array $testCase): array
    {
        // Simulate testing
        $detected = rand(0, 100) > 30; // 70% detection rate simulation
        
        return [
            'name' => $testCase['name'],
            'category' => $testCase['category'],
            'severity' => $testCase['severity'],
            'detected' => $detected,
            'status' => $detected ? 'PASS' : 'FAIL'
        ];
    }

    private function displayResults(array $results): void
    {
        $tableData = [];
        
        foreach ($results as $result) {
            $statusIcon = $result['status'] === 'PASS' ? '✅' : '❌';
            $tableData[] = [
                $statusIcon,
                $result['name'],
                $result['category'],
                $result['severity']
            ];
        }

        $this->table(['Status', 'Contract', 'Category', 'Severity'], $tableData);
    }

    private function showSummary(array $results): void
    {
        $total = count($results);
        $passed = count(array_filter($results, fn($r) => $r['status'] === 'PASS'));
        $rate = $total > 0 ? ($passed / $total) * 100 : 0;

        $this->newLine();
        $this->info("Summary: {$passed}/{$total} tests passed ({$rate}%)");
    }
}