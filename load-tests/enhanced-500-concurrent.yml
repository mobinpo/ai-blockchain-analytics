# =============================================================================
# AI Blockchain Analytics - Enhanced 500 Concurrent Analyses Load Test
# =============================================================================
# Optimized for realistic blockchain analytics workloads with comprehensive monitoring

config:
  target: 'http://localhost:8003'
  
  # Enhanced phases for realistic 500 concurrent analysis load
  phases:
    # System warmup - 60 seconds 
    - duration: 60
      arrivalRate: 5
      name: "System Warmup"
    
    # Initial ramp - reach 50 concurrent users in 2 minutes
    - duration: 120
      arrivalRate: 5
      rampTo: 50
      name: "Initial Ramp to 50"
    
    # Scale to 150 concurrent - 3 minutes
    - duration: 180
      arrivalRate: 50
      rampTo: 150
      name: "Scale to 150 Concurrent"
    
    # Reach 300 concurrent - 3 minutes  
    - duration: 180
      arrivalRate: 150
      rampTo: 300
      name: "Scale to 300 Concurrent"
    
    # Final push to 500 concurrent - 2 minutes
    - duration: 120
      arrivalRate: 300
      rampTo: 500
      name: "Push to 500 Concurrent"
    
    # Sustained high load - 12 minutes at 500 concurrent
    - duration: 720
      arrivalRate: 500
      name: "Sustained 500 Concurrent Load"
    
    # Gradual cool down - 3 minutes
    - duration: 180
      arrivalRate: 500
      rampTo: 50
      name: "Cool Down Phase"
    
    # Final wind down - 1 minute
    - duration: 60
      arrivalRate: 50
      rampTo: 0
      name: "Final Wind Down"

  # Optimized HTTP configuration for high concurrency
  http:
    timeout: 300              # 5 minutes for complex analyses
    pool: 250                 # Connection pool size
    maxSockets: 2000          # Maximum concurrent sockets
    keepAlive: true           # Enable HTTP keep-alive
    requestIdHeader: 'x-request-id'
    extendedMetrics: true     # Enable detailed metrics
    
  # Enhanced performance thresholds for AI blockchain analytics
  ensure:
    - http.request_rate > 400            # Minimum 400 req/sec
    - http.response_time.p50 < 2000      # Median under 2s
    - http.response_time.p95 < 8000      # 95th percentile under 8s  
    - http.response_time.p99 < 15000     # 99th percentile under 15s
    - http.codes.200 > 75                # At least 75% success rate
    - http.codes.202 > 0                 # Accept async responses
    - http.codes.500 < 3                 # Less than 3% server errors
    - http.codes.503 < 1                 # Less than 1% service unavailable

  # Enhanced variables for realistic test data
  variables:
    crypto_symbols: ["BTC", "ETH", "ADA", "SOL", "MATIC", "AVAX", "DOT", "LINK", "UNI", "AAVE", "NEAR", "ATOM", "ALGO", "XTZ", "EGLD", "FTM", "LUNA", "MANA", "SAND", "AXS"]
    analysis_types: ["sentiment", "price_prediction", "market_analysis", "risk_assessment", "technical_analysis", "fundamental_analysis"]
    priorities: ["critical", "high", "medium", "low"]
    timeframes: ["5m", "15m", "1h", "4h", "1d", "7d", "30d"]
    data_sources: ["twitter", "reddit", "telegram", "news", "onchain", "technical", "social"]
    sentiment_thresholds: [0.05, 0.1, 0.15, 0.2, 0.25, 0.3]
    batch_sizes: [50, 100, 200, 500, 1000]
    verification_levels: ["basic", "standard", "enhanced", "premium", "enterprise"]

  # Processor configuration for data manipulation
  processor: "./processors/analysis-processor.js"

scenarios:
  # Primary sentiment analysis workflow (45% of traffic)
  - name: "AI Sentiment Analysis Pipeline"
    weight: 45
    flow:
      # Health check
      - get:
          url: "/health"
          expect:
            - statusCode: [200]
          ifTrue:
            - log: "System healthy, proceeding with analysis"
      
      # Comprehensive sentiment analysis request
      - post:
          url: "/api/sentiment/analyze"
          headers:
            'Content-Type': 'application/json'
            'X-Requested-With': 'XMLHttpRequest'
            'Accept': 'application/json'
            'User-Agent': 'Artillery-LoadTest/1.0'
          json:
            symbol: "{{ $pick(crypto_symbols) }}"
            analysis_type: "{{ $pick(analysis_types) }}"
            priority: "{{ $pick(priorities) }}"
            timeframe: "{{ $pick(timeframes) }}"
            sources: "{{ $pick(data_sources, 3) }}"
            options:
              sentiment_threshold: "{{ $pick(sentiment_thresholds) }}"
              batch_size: "{{ $pick(batch_sizes) }}"
              include_metrics: true
              enable_caching: true
              parallel_processing: true
            metadata:
              test_run: "artillery_500_concurrent"
              timestamp: "{{ $timestamp() }}"
              request_id: "{{ $uuid() }}"
          expect:
            - statusCode: [200, 201, 202, 422]
          capture:
            - json: "$.job_id"
              as: "sentiment_job_id"
            - json: "$.status"
              as: "job_status"
          ifTrue:
            - log: "Sentiment analysis job submitted: {{ sentiment_job_id }}"
      
      # Brief processing wait
      - think: "{{ $randomInt(1, 4) }}"
      
      # Check job status with retry logic
      - loop:
          count: 3
          over:
            - get:
                url: "/api/sentiment/status/{{ sentiment_job_id }}"
                expect:
                  - statusCode: [200, 404, 500]
                capture:
                  - json: "$.status"
                    as: "current_status"
                  - json: "$.progress"
                    as: "job_progress"
            - think: "{{ $randomInt(1, 3) }}"
      
      # Get results if completed
      - get:
          url: "/api/sentiment/results/{{ sentiment_job_id }}"
          expect:
            - statusCode: [200, 404, 202]
      
      - think: "{{ $randomInt(1, 2) }}"

  # Advanced verification workflow (25% of traffic)
  - name: "Enhanced Verification Analysis"
    weight: 25
    flow:
      # Pre-verification health check
      - get:
          url: "/api/verification/health"
          expect:
            - statusCode: [200]
      
      # Submit comprehensive verification request
      - post:
          url: "/api/verification/submit"
          headers:
            'Content-Type': 'application/json'
            'Accept': 'application/json'
          json:
            type: "blockchain_analysis"
            data:
              symbol: "{{ $pick(crypto_symbols) }}"
              analysis_depth: "{{ $pick(['comprehensive', 'detailed', 'basic']) }}"
              verification_level: "{{ $pick(verification_levels) }}"
              include_smart_contracts: true
              include_market_data: true
              include_social_sentiment: true
            priority: "{{ $pick(priorities) }}"
            options:
              timeout: 300
              parallel_verification: true
              cache_results: true
            metadata:
              test_origin: "artillery_load_test"
              concurrent_target: 500
          expect:
            - statusCode: [200, 201, 202, 422, 500]
          capture:
            - json: "$.verification_id"
              as: "verification_id"
            - json: "$.estimated_completion"
              as: "eta"
      
      - think: "{{ $randomInt(2, 5) }}"
      
      # Monitor verification progress
      - get:
          url: "/api/verification/status/{{ verification_id }}"
          expect:
            - statusCode: [200, 404, 500]
          capture:
            - json: "$.progress"
              as: "verification_progress"
            - json: "$.stage"
              as: "verification_stage"
      
      # Enhanced verification badge generation (if applicable)
      - post:
          url: "/api/verification/generate-badge"
          headers:
            'Content-Type': 'application/json'
          json:
            verification_id: "{{ verification_id }}"
            badge_type: "premium"
            include_metrics: true
          expect:
            - statusCode: [200, 201, 404, 422]
      
      - think: "{{ $randomInt(1, 3) }}"

  # PDF report generation workflow (15% of traffic)
  - name: "Advanced PDF Report Generation"
    weight: 15
    flow:
      # Request comprehensive PDF report
      - post:
          url: "/api/pdf/generate"
          headers:
            'Content-Type': 'application/json'
          json:
            report_type: "comprehensive_analysis"
            data:
              symbol: "{{ $pick(crypto_symbols) }}"
              timeframe: "{{ $pick(timeframes) }}"
              analysis_types: "{{ $pick(analysis_types, 2) }}"
              include_charts: true
              include_sentiment_timeline: true
              include_price_correlation: true
              format: "detailed"
            options:
              charts: ["price", "sentiment", "volume", "social_metrics"]
              export_format: "pdf"
              quality: "high"
              include_watermark: false
            metadata:
              test_scenario: "artillery_pdf_generation"
              load_test_phase: "500_concurrent"
          expect:
            - statusCode: [200, 201, 202, 422, 500]
          capture:
            - json: "$.task_id"
              as: "pdf_task_id"
            - json: "$.estimated_time"
              as: "pdf_eta"
      
      - think: "{{ $randomInt(3, 8) }}"
      
      # Check PDF generation status
      - get:
          url: "/api/pdf/status/{{ pdf_task_id }}"
          expect:
            - statusCode: [200, 404, 500]
          capture:
            - json: "$.progress"
              as: "pdf_progress"
            - json: "$.file_size"
              as: "pdf_size"
      
      # Download PDF if ready
      - get:
          url: "/api/pdf/download/{{ pdf_task_id }}"
          expect:
            - statusCode: [200, 404, 202, 500]
      
      - think: "{{ $randomInt(1, 3) }}"

  # Real-time dashboard and analytics (10% of traffic)
  - name: "Real-time Dashboard Analytics"
    weight: 10
    flow:
      # Dashboard main page
      - get:
          url: "/dashboard"
          expect:
            - statusCode: [200, 302, 500]
      
      # Real-time metrics API
      - get:
          url: "/api/dashboard/metrics"
          qs:
            timeframe: "{{ $pick(timeframes) }}"
            symbols: "{{ $pick(crypto_symbols, 3).join(',') }}"
            include_predictions: true
            real_time: true
          expect:
            - statusCode: [200, 500]
          capture:
            - json: "$.metrics.total_analyses"
              as: "total_analyses"
            - json: "$.metrics.active_jobs"
              as: "active_jobs"
      
      # Get recent analyses with pagination
      - get:
          url: "/api/analyses/recent"
          qs:
            limit: "{{ $randomInt(10, 50) }}"
            type: "{{ $pick(analysis_types) }}"
            priority: "{{ $pick(priorities) }}"
            include_metadata: true
          expect:
            - statusCode: [200, 500]
      
      # Live sentiment feed
      - get:
          url: "/api/sentiment/live-feed"
          qs:
            symbols: "{{ $pick(crypto_symbols, 5).join(',') }}"
            limit: 20
          expect:
            - statusCode: [200, 500]
      
      # Performance metrics
      - get:
          url: "/api/system/performance"
          expect:
            - statusCode: [200, 500]
          capture:
            - json: "$.queue_depth"
              as: "queue_depth"
            - json: "$.processing_rate"
              as: "processing_rate"
      
      - think: "{{ $randomInt(2, 5) }}"

  # API stress testing (5% of traffic)
  - name: "API Stress Testing"
    weight: 5
    flow:
      # Batch analysis submission
      - post:
          url: "/api/batch/analyze"
          headers:
            'Content-Type': 'application/json'
          json:
            batch_id: "{{ $uuid() }}"
            analyses:
              - symbol: "{{ $pick(crypto_symbols) }}"
                type: "{{ $pick(analysis_types) }}"
                priority: "{{ $pick(priorities) }}"
              - symbol: "{{ $pick(crypto_symbols) }}"
                type: "{{ $pick(analysis_types) }}"
                priority: "{{ $pick(priorities) }}"
              - symbol: "{{ $pick(crypto_symbols) }}"
                type: "{{ $pick(analysis_types) }}"
                priority: "{{ $pick(priorities) }}"
            options:
              parallel_execution: true
              priority_override: false
          expect:
            - statusCode: [200, 201, 202, 422, 500]
          capture:
            - json: "$.batch_id"
              as: "batch_id"
      
      # Rapid status checks
      - loop:
          count: "{{ $randomInt(3, 7) }}"
          over:
            - get:
                url: "/api/batch/status/{{ batch_id }}"
                expect:
                  - statusCode: [200, 404, 500]
            - think: 0.5
      
      # Cache performance test
      - get:
          url: "/api/cache/performance"
          qs:
            test_size: "large"
            operations: "100"
          expect:
            - statusCode: [200, 500]

# Custom functions for realistic data generation
functions:
  # Generate realistic contract addresses
  generateContractAddress: |
    function() {
      const chars = 'abcdef0123456789';
      let result = '0x';
      for (let i = 0; i < 40; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
      }
      return result;
    }
  
  # Generate timestamp within recent range
  generateRecentTimestamp: |
    function() {
      const now = Date.now();
      const oneWeekAgo = now - (7 * 24 * 60 * 60 * 1000);
      return Math.floor(Math.random() * (now - oneWeekAgo) + oneWeekAgo);
    }
  
  # Generate realistic batch sizes based on priority
  generateBatchSize: |
    function(priority) {
      const sizes = {
        'critical': [100, 200, 500],
        'high': [200, 500, 1000],
        'medium': [500, 1000, 2000],
        'low': [1000, 2000, 5000]
      };
      const options = sizes[priority] || sizes['medium'];
      return options[Math.floor(Math.random() * options.length)];
    }

# Enhanced plugins for monitoring and metrics
plugins:
  # Detailed endpoint metrics
  - name: "@artilleryio/plugin-metrics-by-endpoint"
    config:
      details: true
      includeBody: false
      
  # Memory and resource monitoring
  - name: "artillery-plugin-statsd"
    config:
      host: "localhost"
      port: 8125
      prefix: "artillery.ai_blockchain.500_concurrent"
      
  # Custom metrics collection
  - name: "artillery-plugin-publish-metrics"
    config:
      type: "json"
      path: "./reports/metrics-{{ $timestamp() }}.json"

# Post-test analysis
after:
  flow:
    - log: "🎉 500 concurrent AI blockchain analyses load test completed!"
    - log: "📊 Peak concurrent users: 500"
    - log: "⏱️  Total test duration: ~25 minutes"
    - log: "📈 Check reports directory for detailed performance analysis"
    - log: "🔍 Monitor Sentry for any errors captured during the test"
    - log: "🔭 Review Telescope entries for detailed request analysis"
