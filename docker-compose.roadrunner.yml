version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile.roadrunner
      target: production
    container_name: ai_blockchain_app_roadrunner
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "6001:6001"
      - "2112:2112"
    environment:
      - APP_NAME=AI Blockchain Analytics
      - APP_ENV=local
      - APP_DEBUG=true
      - APP_URL=http://localhost:8000
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=ai_blockchain_analytics
      - DB_USERNAME=ai_blockchain_user
      - DB_PASSWORD=secure_password_123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis_password_123
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
      - OCTANE_SERVER=roadrunner
      - ROADRUNNER_HTTP_HOST=0.0.0.0
      - ROADRUNNER_HTTP_PORT=8000
      - RR_WORKERS=8
      - RR_MAX_JOBS=1000
      - CONTAINER_ROLE=app
      - BLOCKCHAIN_EXPLORER_DEFAULT=etherscan
      - DOMPDF_ENABLED=true
      - BROWSERLESS_ENABLED=false
    volumes:
      - ./storage:/var/www/storage
      - ./bootstrap/cache:/var/www/bootstrap/cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai_blockchain_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  postgres:
    image: postgres:15-alpine
    container_name: ai_blockchain_postgres_roadrunner
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ai_blockchain_analytics
      POSTGRES_USER: ai_blockchain_user
      POSTGRES_PASSWORD: secure_password_123
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data_roadrunner:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - ai_blockchain_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_blockchain_user -d ai_blockchain_analytics"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: ai_blockchain_redis_roadrunner
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass redis_password_123 --appendonly yes --save 900 1 --save 300 10 --save 60 10000
    volumes:
      - redis_data_roadrunner:/data
    networks:
      - ai_blockchain_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password_123", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  horizon:
    build:
      context: .
      dockerfile: docker/Dockerfile.roadrunner
      target: production
    container_name: ai_blockchain_horizon_roadrunner
    restart: unless-stopped
    command: ["php", "artisan", "horizon"]
    environment:
      - APP_NAME=AI Blockchain Analytics
      - APP_ENV=local
      - APP_DEBUG=true
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=ai_blockchain_analytics
      - DB_USERNAME=ai_blockchain_user
      - DB_PASSWORD=secure_password_123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis_password_123
      - CACHE_DRIVER=redis
      - QUEUE_CONNECTION=redis
      - CONTAINER_ROLE=queue
    volumes:
      - ./storage:/var/www/storage
    depends_on:
      app:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai_blockchain_network
    healthcheck:
      test: ["CMD", "php", "artisan", "horizon:status"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 120s

  scheduler:
    build:
      context: .
      dockerfile: docker/Dockerfile.roadrunner
      target: production
    container_name: ai_blockchain_scheduler_roadrunner
    restart: unless-stopped
    command: >
      sh -c "while true; do
        php artisan schedule:run --verbose --no-interaction
        sleep 60
      done"
    environment:
      - APP_NAME=AI Blockchain Analytics
      - APP_ENV=local
      - APP_DEBUG=true
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=ai_blockchain_analytics
      - DB_USERNAME=ai_blockchain_user
      - DB_PASSWORD=secure_password_123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis_password_123
      - CACHE_DRIVER=redis
      - CONTAINER_ROLE=scheduler
    volumes:
      - ./storage:/var/www/storage
    depends_on:
      app:
        condition: service_healthy
    networks:
      - ai_blockchain_network

  # Optional: Prometheus for monitoring RoadRunner metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: ai_blockchain_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - ai_blockchain_network
    profiles:
      - monitoring

  # Optional: Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: ai_blockchain_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - ai_blockchain_network
    profiles:
      - monitoring

volumes:
  postgres_data_roadrunner:
    driver: local
  redis_data_roadrunner:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ai_blockchain_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
