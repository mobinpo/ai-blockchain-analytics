<?php

/**
 * Stripe Sandbox Setup Script
 * 
 * This script helps set up Stripe products and prices for the AI Blockchain Analytics platform.
 * Run this script to create the necessary products and prices in your Stripe test environment.
 */

require_once __DIR__ . '/../vendor/autoload.php';

use Stripe\Stripe;
use Stripe\Product;
use Stripe\Price;

class StripeSetupHelper
{
    private $stripeSecretKey;
    
    public function __construct(string $stripeSecretKey)
    {
        $this->stripeSecretKey = $stripeSecretKey;
        Stripe::setApiKey($this->stripeSecretKey);
    }
    
    public function setupProducts(): array
    {
        echo "🚀 Setting up Stripe products and prices for AI Blockchain Analytics...\n\n";
        
        $results = [];
        
        // Define our plans
        $plans = [
            'starter' => [
                'name' => 'AI Blockchain Analytics - Starter Plan',
                'description' => 'Perfect for individual developers and small projects. Includes vulnerability scanning, smart contract analysis, and basic reporting.',
                'monthly_price' => 2900, // $29.00 in cents
                'yearly_price' => 29000,  // $290.00 in cents (2 months free)
            ],
            'professional' => [
                'name' => 'AI Blockchain Analytics - Professional Plan', 
                'description' => 'Ideal for growing teams and medium-sized projects. Includes advanced reporting, team collaboration, and webhook support.',
                'monthly_price' => 9900, // $99.00 in cents
                'yearly_price' => 99000, // $990.00 in cents (2 months free)
            ],
            'enterprise' => [
                'name' => 'AI Blockchain Analytics - Enterprise Plan',
                'description' => 'For large organizations with high-volume needs. Includes SSO, compliance reporting, and dedicated support.',
                'monthly_price' => 29900, // $299.00 in cents
                'yearly_price' => 299000, // $2990.00 in cents (2 months free)
            ],
        ];
        
        foreach ($plans as $planKey => $planData) {
            echo "📦 Creating product: {$planData['name']}\n";
            
            // Create product
            $product = Product::create([
                'name' => $planData['name'],
                'description' => $planData['description'],
                'metadata' => [
                    'plan_key' => $planKey,
                    'app' => 'ai-blockchain-analytics',
                ],
            ]);
            
            echo "   ✅ Product created: {$product->id}\n";
            
            // Create monthly price
            $monthlyPrice = Price::create([
                'unit_amount' => $planData['monthly_price'],
                'currency' => 'usd',
                'recurring' => ['interval' => 'month'],
                'product' => $product->id,
                'nickname' => ucfirst($planKey) . ' Monthly',
                'metadata' => [
                    'plan_key' => $planKey,
                    'interval' => 'monthly',
                ],
            ]);
            
            echo "   💰 Monthly price created: {$monthlyPrice->id} (\${$planData['monthly_price']} cents)\n";
            
            // Create yearly price
            $yearlyPrice = Price::create([
                'unit_amount' => $planData['yearly_price'],
                'currency' => 'usd',
                'recurring' => ['interval' => 'year'],
                'product' => $product->id,
                'nickname' => ucfirst($planKey) . ' Yearly',
                'metadata' => [
                    'plan_key' => $planKey,
                    'interval' => 'yearly',
                ],
            ]);
            
            echo "   💰 Yearly price created: {$yearlyPrice->id} (\${$planData['yearly_price']} cents)\n";
            
            $results[$planKey] = [
                'product_id' => $product->id,
                'monthly_price_id' => $monthlyPrice->id,
                'yearly_price_id' => $yearlyPrice->id,
            ];
            
            echo "   ✨ {$planData['name']} setup complete!\n\n";
        }
        
        return $results;
    }
    
    public function generateEnvConfig(array $results): string
    {
        $envConfig = "\n# Stripe Configuration - Generated by setup script\n";
        $envConfig .= "# Replace the test keys below with your actual Stripe keys\n\n";
        
        $envConfig .= "# Stripe API Keys (Test Mode)\n";
        $envConfig .= "STRIPE_KEY=pk_test_your_stripe_publishable_key_here\n";
        $envConfig .= "STRIPE_SECRET=sk_test_your_stripe_secret_key_here\n";
        $envConfig .= "STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret_here\n\n";
        
        $envConfig .= "# Cashier Configuration\n";
        $envConfig .= "CASHIER_CURRENCY=usd\n";
        $envConfig .= "CASHIER_CURRENCY_LOCALE=en_US\n";
        $envConfig .= "CASHIER_LOGGER=stack\n\n";
        
        $envConfig .= "# Stripe Product Price IDs (Generated)\n";
        foreach ($results as $planKey => $ids) {
            $envConfig .= "STRIPE_PRICE_" . strtoupper($planKey) . "_MONTHLY={$ids['monthly_price_id']}\n";
            $envConfig .= "STRIPE_PRICE_" . strtoupper($planKey) . "_YEARLY={$ids['yearly_price_id']}\n";
        }
        
        return $envConfig;
    }
    
    public function displaySummary(array $results): void
    {
        echo "🎉 Stripe setup complete!\n\n";
        echo "📋 SUMMARY:\n";
        echo "═══════════════════════════════════════════════════════════\n\n";
        
        foreach ($results as $planKey => $ids) {
            echo "🔸 " . ucfirst($planKey) . " Plan:\n";
            echo "   Product ID: {$ids['product_id']}\n";
            echo "   Monthly Price ID: {$ids['monthly_price_id']}\n";
            echo "   Yearly Price ID: {$ids['yearly_price_id']}\n\n";
        }
        
        echo "📝 NEXT STEPS:\n";
        echo "═══════════════════════════════════════════════════════════\n\n";
        echo "1. Copy your actual Stripe API keys from the Stripe Dashboard\n";
        echo "2. Update your .env file with the price IDs shown above\n";
        echo "3. Set up webhook endpoints in Stripe Dashboard:\n";
        echo "   URL: https://yourdomain.com/stripe/webhook\n";
        echo "   Events: customer.subscription.*, invoice.payment_*\n";
        echo "4. Test the billing flow in your application\n\n";
        
        echo "🔒 SECURITY NOTE:\n";
        echo "═══════════════════════════════════════════════════════════\n";
        echo "• Never commit real Stripe keys to version control\n";
        echo "• Always use test keys in development\n";
        echo "• Use environment variables for all sensitive data\n\n";
    }
    
    public function createWebhookConfiguration(): array
    {
        return [
            'endpoint_url' => 'https://yourdomain.com/stripe/webhook',
            'events' => [
                'customer.subscription.created',
                'customer.subscription.updated', 
                'customer.subscription.deleted',
                'customer.subscription.trial_will_end',
                'invoice.payment_succeeded',
                'invoice.payment_failed',
                'payment_method.attached',
                'customer.updated',
                'setup_intent.succeeded',
            ],
            'description' => 'AI Blockchain Analytics - Subscription Management',
        ];
    }
}

// Main execution
if (php_sapi_name() === 'cli') {
    echo "🔧 AI Blockchain Analytics - Stripe Sandbox Setup\n";
    echo "══════════════════════════════════════════════════\n\n";
    
    // Get Stripe secret key from user input
    echo "Please enter your Stripe TEST secret key (sk_test_...):\n";
    $stripeKey = trim(fgets(STDIN));
    
    if (empty($stripeKey) || !str_starts_with($stripeKey, 'sk_test_')) {
        echo "❌ Error: Please provide a valid Stripe TEST secret key.\n";
        exit(1);
    }
    
    try {
        $setup = new StripeSetupHelper($stripeKey);
        $results = $setup->setupProducts();
        
        // Generate environment configuration
        $envConfig = $setup->generateEnvConfig($results);
        
        // Save to file
        file_put_contents(__DIR__ . '/stripe-env-config.txt', $envConfig);
        echo "💾 Environment configuration saved to: stripe-env-config.txt\n\n";
        
        // Display summary
        $setup->displaySummary($results);
        
        // Show webhook configuration
        $webhookConfig = $setup->createWebhookConfiguration();
        echo "🪝 WEBHOOK CONFIGURATION:\n";
        echo "═══════════════════════════════════════════════════════════\n";
        echo "Endpoint URL: {$webhookConfig['endpoint_url']}\n";
        echo "Events to subscribe to:\n";
        foreach ($webhookConfig['events'] as $event) {
            echo "  • {$event}\n";
        }
        
    } catch (Exception $e) {
        echo "❌ Error: " . $e->getMessage() . "\n";
        exit(1);
    }
}
