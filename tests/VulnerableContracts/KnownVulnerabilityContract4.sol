// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/**
 * @title UncheckedExternalCallVulnerable
 * @dev Contract with unchecked external calls
 * Based on King of Ether and similar patterns
 */
contract UncheckedExternalCallVulnerable {
    address public currentKing;
    uint256 public currentBid;
    mapping(address => uint256) public refunds;
    
    constructor() payable {
        currentKing = msg.sender;
        currentBid = msg.value;
    }
    
    // VULNERABILITY: Unchecked external call can cause DoS
    function becomeKing() public payable {
        require(msg.value > currentBid, "Bid too low");
        
        address previousKing = currentKing;
        uint256 previousBid = currentBid;
        
        currentKing = msg.sender;
        currentBid = msg.value;
        
        // VULNERABILITY: If this call fails, the function reverts
        // Malicious contract can always revert and become permanent king
        previousKing.call{value: previousBid}("");
    }
    
    // VULNERABILITY: Unchecked low-level call
    function sendReward(address recipient, uint256 amount) public {
        require(msg.sender == currentKing, "Only king can send rewards");
        
        // VULNERABILITY: Return value not checked
        recipient.call{value: amount}("");
    }
    
    // VULNERABILITY: Delegatecall to user-controlled address
    function executeArbitraryCode(address target, bytes calldata data) public {
        require(msg.sender == currentKing, "Only king");
        
        // VULNERABILITY: Delegatecall can change contract state
        target.delegatecall(data);
    }
    
    receive() external payable {}
}
