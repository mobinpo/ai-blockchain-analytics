config:
  target: 'http://localhost:8000'
  plugins:
    metrics-by-endpoint:
      useOnlyRequestNames: true
  phases:
    # Focused blockchain analysis load test
    - duration: 60
      arrivalRate: 10
      name: "Warm-up blockchain analysis"
    - duration: 300
      arrivalRate: 50
      rampTo: 200
      name: "Ramp-up blockchain analysis"
    - duration: 600
      arrivalRate: 200
      name: "Sustained blockchain analysis load"
    - duration: 60
      arrivalRate: 200
      rampTo: 10
      name: "Cool down"
  processor: "./load-tests/processor.js"
  variables:
    # Comprehensive list of major tokens for realistic testing
    majorTokens:
      - "0xdAC17F958D2ee523a2206206994597C13D831ec7"  # USDT
      - "0xA0b86a33E8CC21308bA6f8E0b5a3601C41aBdEB"  # USDC
      - "0x6B175474E89094C44Da98b954EedeAC495271d0F"  # DAI
      - "0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599"  # WBTC
      - "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"  # WETH
      - "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"  # UNI
      - "0x514910771AF9Ca656af840dff83E8264EcF986CA"  # LINK
      - "0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE"  # SHIB
      - "0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0"  # MATIC
      - "0xBB0E17EF65F82Ab018d8EDd776e8DD940327B28b"  # AXS
    defiProtocols:
      - "0x1f98431c8aD98523631AE4a59f267346ea31F984"  # Uniswap V3
      - "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f"  # Uniswap V2
      - "0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac"  # Sushiswap
      - "0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B"  # Compound
      - "0x398eC7346DcD622eDc5ae82352F02bE94C62d119"  # Aave
    nftContracts:
      - "0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D"  # BAYC
      - "0x60E4d786628Fea6478F785A6d7e704777c86a7c6"  # MAYC
      - "0xED5AF388653567Af2F388E6224dC7C4b3241C544"  # Azuki
      - "0x49cF6f5d44E70224e2E23fDcdd2C053F30aDA28B"  # CloneX
    analysisTypes:
      - "basic"
      - "comprehensive"
      - "security"
      - "performance"
      - "liquidity"
    chains:
      - "1"     # Ethereum
      - "56"    # BSC
      - "137"   # Polygon
      - "250"   # Fantom
      - "43114" # Avalanche

scenarios:
  # Comprehensive blockchain analysis (50% of traffic)
  - name: "Comprehensive Analysis"
    weight: 50
    flow:
      - function: "generateRealisticContractAddress"
      - function: "generateRandomChain"
      - function: "generateUserAgent"
      - post:
          url: "/api/v1/blockchain/analyze"
          name: "comprehensive-analysis"
          headers:
            Content-Type: "application/json"
            Accept: "application/json"
            User-Agent: "{{ userAgent }}"
          json:
            contract_address: "{{ contractAddress }}"
            chain_id: "{{ chainId }}"
            analysis_type: "comprehensive"
            include_sentiment: true
            include_verification: true
            include_security: true
            include_performance: true
            cache_results: false
          capture:
            - json: "$.analysis_id"
              as: "analysisId"
            - json: "$.processing_time"
              as: "processingTime"
          afterResponse: 
            - "validateAnalysisResponse"
            - "trackResponseTime"
            - "handleError"
      - think: 3
      - get:
          url: "/api/v1/blockchain/analysis/{{ analysisId }}/status"
          name: "analysis-status"
          headers:
            Accept: "application/json"
            User-Agent: "{{ userAgent }}"
      - think: 2
      - get:
          url: "/api/v1/blockchain/analysis/{{ analysisId }}/results"
          name: "analysis-results"
          headers:
            Accept: "application/json"
            User-Agent: "{{ userAgent }}"

  # Security-focused analysis (20% of traffic)
  - name: "Security Analysis"
    weight: 20
    flow:
      - function: "generateRealisticContractAddress"
      - function: "generateRandomChain"
      - post:
          url: "/api/v1/blockchain/security-scan"
          name: "security-scan"
          headers:
            Content-Type: "application/json"
            Accept: "application/json"
          json:
            contract_address: "{{ contractAddress }}"
            chain_id: "{{ chainId }}"
            scan_type: "comprehensive"
            check_vulnerabilities: true
            check_audit_status: true
            check_rugpull_risk: true
          capture:
            - json: "$.scan_id"
              as: "scanId"
      - think: 5
      - get:
          url: "/api/v1/blockchain/security-scan/{{ scanId }}/report"
          name: "security-report"
          headers:
            Accept: "application/json"

  # Performance analysis (15% of traffic)
  - name: "Performance Analysis"
    weight: 15
    flow:
      - post:
          url: "/api/v1/blockchain/performance"
          name: "performance-analysis"
          headers:
            Content-Type: "application/json"
            Accept: "application/json"
          json:
            contract_address: "{{ majorTokens.random }}"
            chain_id: "{{ chains.random }}"
            metrics: ["gas_usage", "transaction_volume", "liquidity", "volatility"]
            timeframe: "7d"
          capture:
            - json: "$.performance_id"
              as: "performanceId"
      - think: 2
      - get:
          url: "/api/v1/blockchain/performance/{{ performanceId }}/metrics"
          name: "performance-metrics"
          headers:
            Accept: "application/json"

  # Multi-chain comparison (10% of traffic)
  - name: "Multi-Chain Analysis"
    weight: 10
    flow:
      - post:
          url: "/api/v1/blockchain/multi-chain-analysis"
          name: "multi-chain-analysis"
          headers:
            Content-Type: "application/json"
            Accept: "application/json"
          json:
            contract_address: "{{ majorTokens.random }}"
            chains: ["1", "56", "137"]
            compare_metrics: ["price", "volume", "liquidity"]
            include_arbitrage: true
          capture:
            - json: "$.comparison_id"
              as: "comparisonId"
      - think: 8
      - get:
          url: "/api/v1/blockchain/multi-chain-analysis/{{ comparisonId }}/results"
          name: "multi-chain-results"
          headers:
            Accept: "application/json"

  # Batch analysis (5% of traffic) - High load scenario
  - name: "Batch Analysis"
    weight: 5
    flow:
      - post:
          url: "/api/v1/blockchain/batch-analyze"
          name: "batch-analysis"
          headers:
            Content-Type: "application/json"
            Accept: "application/json"
          json:
            contracts:
              - contract_address: "{{ majorTokens.random }}"
                chain_id: "1"
              - contract_address: "{{ defiProtocols.random }}"
                chain_id: "1"
              - contract_address: "{{ nftContracts.random }}"
                chain_id: "1"
            analysis_type: "basic"
            priority: "high"
          capture:
            - json: "$.batch_id"
              as: "batchId"
      - think: 15
      - get:
          url: "/api/v1/blockchain/batch-analyze/{{ batchId }}/progress"
          name: "batch-progress"
          headers:
            Accept: "application/json"
      - think: 20
      - get:
          url: "/api/v1/blockchain/batch-analyze/{{ batchId }}/results"
          name: "batch-results"
          headers:
            Accept: "application/json"

# Specific SLA requirements for blockchain analysis
expect:
  # Response time requirements
  - http.response_time.p95: 3000    # 95% under 3 seconds
  - http.response_time.p99: 8000    # 99% under 8 seconds
  - http.response_time.median: 800  # Median under 800ms
  
  # Success rate requirements
  - http.codes.200: 90              # At least 90% success rate
  - http.codes.2xx: 95              # At least 95% 2xx responses
  - http.codes.5xx: 1               # Max 1% server errors
  
  # Throughput requirements
  - http.request_rate: 150          # Min 150 requests/second
  
  # Analysis-specific expectations
  - http.codes.422: 3               # Max 3% validation errors