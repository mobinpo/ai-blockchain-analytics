name: CI Pipeline

on:
  push:
    branches: [ "main", "master", "develop" ]
  pull_request:
    branches: [ "main", "master", "develop" ]

env:
  PHP_VERSION: '8.3'
  NODE_VERSION: '20'

jobs:
  # Build and cache Docker image
  build-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-id: ${{ steps.build.outputs.imageid }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and cache Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          target: ci
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/ci-image.tar
          tags: ai-blockchain-analytics:ci

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: ci-image
          path: /tmp/ci-image.tar
          retention-days: 1

  # Code style check with Pint
  code-style:
    name: Code Style (Laravel Pint)
    runs-on: ubuntu-latest
    needs: build-image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: ci-image
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/ci-image.tar

      - name: Run Laravel Pint
        run: |
          docker run --rm \
            -v $(pwd):/var/www \
            ai-blockchain-analytics:ci \
            vendor/bin/pint --test --verbose

  # Static analysis with Psalm
  static-analysis:
    name: Static Analysis (Psalm)
    runs-on: ubuntu-latest
    needs: build-image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: ci-image
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/ci-image.tar

      - name: Run Psalm
        run: |
          docker run --rm \
            -v $(pwd):/var/www \
            ai-blockchain-analytics:ci \
            vendor/bin/psalm --no-cache --output-format=github

  # Frontend build and tests
  frontend-tests:
    name: Frontend Build & Tests
    runs-on: ubuntu-latest
    needs: build-image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: ci-image
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/ci-image.tar

      - name: Build frontend assets
        run: |
          docker run --rm \
            -v $(pwd):/var/www \
            ai-blockchain-analytics:ci \
            npm run build

      - name: Run frontend tests (if available)
        run: |
          docker run --rm \
            -v $(pwd):/var/www \
            ai-blockchain-analytics:ci \
            sh -c "npm run test || echo 'No frontend tests configured'"

  # PHPUnit tests
  phpunit-tests:
    name: PHPUnit Tests
    runs-on: ubuntu-latest
    needs: build-image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: ci-image
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/ci-image.tar

      - name: Start test services
        run: |
          docker compose -f docker-compose.ci.yml up -d postgres redis

      - name: Wait for services to be ready
        run: |
          timeout 60 bash -c 'until docker compose -f docker-compose.ci.yml exec -T postgres pg_isready -U postgres -d testing; do sleep 2; done'
          timeout 30 bash -c 'until docker compose -f docker-compose.ci.yml exec -T redis redis-cli ping | grep -q PONG; do sleep 1; done'

      - name: Run database migrations and tests
        run: |
          docker compose -f docker-compose.ci.yml run --rm app sh -c "
            php artisan key:generate --force &&
            php artisan migrate --force --seed &&
            vendor/bin/phpunit --testdox --colors=always --coverage-text
          "

      - name: Upload test coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: backend
          name: backend-coverage

      - name: Cleanup test services
        if: always()
        run: docker compose -f docker-compose.ci.yml down -v

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Deployment preparation
  prepare-deploy:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    needs: [code-style, static-analysis, frontend-tests, phpunit-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build production image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          tags: ai-blockchain-analytics:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/prod-image.tar

      - name: Upload production image
        uses: actions/upload-artifact@v4
        with:
          name: prod-image
          path: /tmp/prod-image.tar
          retention-days: 7 