apiVersion: v1
kind: Namespace
metadata:
  name: ai-blockchain-analytics
  labels:
    name: ai-blockchain-analytics
    project: ai-blockchain-analytics
    environment: production

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: ai-blockchain-analytics
data:
  APP_NAME: "AI Blockchain Analytics"
  APP_ENV: "production"
  APP_DEBUG: "false"
  APP_URL: "https://analytics.yourdomain.com"
  DB_CONNECTION: "pgsql"
  DB_HOST: "postgres-service"
  DB_PORT: "5432"
  DB_DATABASE: "ai_blockchain_analytics"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  CACHE_DRIVER: "redis"
  SESSION_DRIVER: "redis"
  QUEUE_CONNECTION: "redis"
  OCTANE_SERVER: "roadrunner"
  ROADRUNNER_HTTP_HOST: "0.0.0.0"
  ROADRUNNER_HTTP_PORT: "8000"
  ROADRUNNER_WORKERS: "8"
  RR_WORKERS: "8"
  RR_MAX_JOBS: "2000"
  CONTAINER_ROLE: "app"
  BLOCKCHAIN_EXPLORER_DEFAULT: "etherscan"
  DOMPDF_ENABLED: "true"
  BROWSERLESS_ENABLED: "false"
  VERIFICATION_URL_LIFETIME: "3600"
  VERIFICATION_RATE_LIMIT: "10"
  OPENAI_MODEL: "gpt-4"
  SENTRY_TRACES_SAMPLE_RATE: "0.1"
  SENTRY_PROFILES_SAMPLE_RATE: "0.1"
  SENTRY_ENVIRONMENT: "production"
  SENTRY_RELEASE: "latest"
  TELESCOPE_ENABLED: "true"
  TELESCOPE_DRIVER: "database"
  TELESCOPE_QUEUE_WATCHER: "true"
  TELESCOPE_CACHE_WATCHER: "true"
  TELESCOPE_DUMP_WATCHER: "false"
  TELESCOPE_LOG_WATCHER: "true"
  TELESCOPE_QUERY_WATCHER: "true"
  TELESCOPE_REQUEST_WATCHER: "true"
  TELESCOPE_VIEW_WATCHER: "false"

---
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: ai-blockchain-analytics
type: Opaque
stringData:
  APP_KEY: "base64:your-app-key-here"
  DB_USERNAME: "ai_blockchain_user"
  DB_PASSWORD: "your-secure-db-password"
  REDIS_PASSWORD: "your-secure-redis-password"
  OPENAI_API_KEY: "your-openai-api-key"
  ETHERSCAN_API_KEY: "your-etherscan-api-key"
  BSCSCAN_API_KEY: "your-bscscan-api-key"
  POLYGONSCAN_API_KEY: "your-polygonscan-api-key"
  VERIFICATION_SECRET_KEY: "your-verification-secret-key"
  SENTRY_DSN: "your-sentry-dsn"
  TELESCOPE_ALLOWED_IPS: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
  TELESCOPE_ADMIN_TOKEN: "your-telescope-admin-token"

---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: ai-blockchain-analytics
  labels:
    app: postgres
    component: database
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        component: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_DATABASE
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: DB_USERNAME
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: DB_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 15
          periodSeconds: 5
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 45
          periodSeconds: 10
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: ai-blockchain-analytics
  labels:
    app: postgres
spec:
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app: postgres
  type: ClusterIP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: ai-blockchain-analytics
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: gp2

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: ai-blockchain-analytics
  labels:
    app: redis
    component: cache
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        component: cache
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        args:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        - --appendonly
        - "yes"
        - --save
        - "900 1"
        - --save
        - "300 10"
        - --save
        - "60 10000"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: REDIS_PASSWORD
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: ai-blockchain-analytics
  labels:
    app: redis
spec:
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  selector:
    app: redis
  type: ClusterIP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: ai-blockchain-analytics
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp2

---
# RoadRunner Laravel App Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: roadrunner-app
  namespace: ai-blockchain-analytics
  labels:
    app: roadrunner-app
    component: web
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: roadrunner-app
  template:
    metadata:
      labels:
        app: roadrunner-app
        component: web
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "2112"
        prometheus.io/path: "/metrics"
    spec:
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command:
        - sh
        - -c
        - |
          until pg_isready -h postgres-service -p 5432 -U $DB_USERNAME; do
            echo "Waiting for postgres..."
            sleep 2
          done
        env:
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: DB_USERNAME
      - name: wait-for-redis
        image: redis:7-alpine
        command:
        - sh
        - -c
        - |
          until redis-cli -h redis-service -p 6379 -a $REDIS_PASSWORD ping; do
            echo "Waiting for redis..."
            sleep 2
          done
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: REDIS_PASSWORD
      - name: migrate-database
        image: your-registry/ai-blockchain-analytics-roadrunner:latest
        command:
        - php
        - artisan
        - migrate
        - --force
        envFrom:
        - configMapRef:
            name: app-config
        - secretRef:
            name: app-secrets
        volumeMounts:
        - name: app-storage
          mountPath: /var/www/storage
        - name: cache-storage
          mountPath: /var/www/bootstrap/cache
      containers:
      - name: roadrunner-app
        image: your-registry/ai-blockchain-analytics-roadrunner:latest
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        - containerPort: 6001
          name: websocket
          protocol: TCP
        - containerPort: 2112
          name: metrics
          protocol: TCP
        envFrom:
        - configMapRef:
            name: app-config
        - secretRef:
            name: app-secrets
        volumeMounts:
        - name: app-storage
          mountPath: /var/www/storage
        - name: cache-storage
          mountPath: /var/www/bootstrap/cache
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - sleep 15
      volumes:
      - name: app-storage
        persistentVolumeClaim:
          claimName: app-storage-pvc
      - name: cache-storage
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: roadrunner-app-service
  namespace: ai-blockchain-analytics
  labels:
    app: roadrunner-app
    component: web
spec:
  ports:
  - port: 80
    targetPort: 8000
    name: http
    protocol: TCP
  - port: 6001
    targetPort: 6001
    name: websocket
    protocol: TCP
  - port: 2112
    targetPort: 2112
    name: metrics
    protocol: TCP
  selector:
    app: roadrunner-app
  type: ClusterIP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: app-storage-pvc
  namespace: ai-blockchain-analytics
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: efs-sc

---
# Horizon Queue Worker Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: horizon-worker
  namespace: ai-blockchain-analytics
  labels:
    app: horizon-worker
    component: queue
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: horizon-worker
  template:
    metadata:
      labels:
        app: horizon-worker
        component: queue
    spec:
      initContainers:
      - name: wait-for-app
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          until nc -z roadrunner-app-service 80; do
            echo "Waiting for app service..."
            sleep 5
          done
      containers:
      - name: horizon-worker
        image: your-registry/ai-blockchain-analytics-roadrunner:latest
        command:
        - php
        - artisan
        - horizon
        envFrom:
        - configMapRef:
            name: app-config
        - secretRef:
            name: app-secrets
        env:
        - name: CONTAINER_ROLE
          value: "queue"
        volumeMounts:
        - name: app-storage
          mountPath: /var/www/storage
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        readinessProbe:
          exec:
            command:
            - php
            - artisan
            - horizon:status
          initialDelaySeconds: 30
          periodSeconds: 30
        livenessProbe:
          exec:
            command:
            - php
            - artisan
            - horizon:status
          initialDelaySeconds: 60
          periodSeconds: 60
      volumes:
      - name: app-storage
        persistentVolumeClaim:
          claimName: app-storage-pvc

---
# Scheduler Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scheduler
  namespace: ai-blockchain-analytics
  labels:
    app: scheduler
    component: cron
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: scheduler
  template:
    metadata:
      labels:
        app: scheduler
        component: cron
    spec:
      containers:
      - name: scheduler
        image: your-registry/ai-blockchain-analytics-roadrunner:latest
        command:
        - /bin/sh
        - -c
        - |
          while true; do
            php artisan schedule:run --verbose --no-interaction
            sleep 60
          done
        envFrom:
        - configMapRef:
            name: app-config
        - secretRef:
            name: app-secrets
        env:
        - name: CONTAINER_ROLE
          value: "scheduler"
        volumeMounts:
        - name: app-storage
          mountPath: /var/www/storage
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: app-storage
        persistentVolumeClaim:
          claimName: app-storage-pvc

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: app-ingress
  namespace: ai-blockchain-analytics
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - analytics.yourdomain.com
    secretName: app-tls-secret
  rules:
  - host: analytics.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: roadrunner-app-service
            port:
              number: 80

---
# Horizontal Pod Autoscaler for RoadRunner App
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: roadrunner-app-hpa
  namespace: ai-blockchain-analytics
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: roadrunner-app
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 4
        periodSeconds: 15
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
# Horizontal Pod Autoscaler for Horizon Workers
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: horizon-worker-hpa
  namespace: ai-blockchain-analytics
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: horizon-worker
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: app-network-policy
  namespace: ai-blockchain-analytics
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector: {}
  egress:
  - {}

---
# Service Monitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: roadrunner-app-metrics
  namespace: ai-blockchain-analytics
  labels:
    app: roadrunner-app
spec:
  selector:
    matchLabels:
      app: roadrunner-app
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics