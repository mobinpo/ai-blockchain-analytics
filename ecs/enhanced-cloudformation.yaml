AWSTemplateFormatVersion: '2010-09-09'
Description: 'Enhanced ECS deployment for AI Blockchain Analytics with RoadRunner, Redis, and PostgreSQL'

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Environment name
  
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID for the deployment
  
  PrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Private subnet IDs for ECS tasks
  
  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Public subnet IDs for ALB
  
  ECRRepository:
    Type: String
    Description: ECR repository URI for the application image
  
  ImageTag:
    Type: String
    Default: latest
    Description: Docker image tag
  
  DomainName:
    Type: String
    Default: analytics.yourdomain.com
    Description: Domain name for the application
  
  CertificateArn:
    Type: String
    Description: ACM certificate ARN for HTTPS
  
  DatabasePassword:
    Type: String
    NoEcho: true
    MinLength: 8
    Description: PostgreSQL master password
  
  RedisPassword:
    Type: String
    NoEcho: true
    MinLength: 8
    Description: Redis authentication password

Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${AWS::StackName}-cluster'
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 4
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: ai-blockchain-analytics

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-alb-sg'

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 6001
          ToPort: 6001
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ecs-sg'

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS PostgreSQL
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ECSSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-db-sg'

  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ElastiCache Redis
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref ECSSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-redis-sg'

  # RDS PostgreSQL
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for PostgreSQL database
      SubnetIds: !Ref PrivateSubnetIds
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-db-subnet-group'

  PostgreSQLDatabase:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    Properties:
      DBInstanceIdentifier: !Sub '${AWS::StackName}-postgres'
      DBInstanceClass: db.t3.medium
      Engine: postgres
      EngineVersion: '15.4'
      AllocatedStorage: 100
      StorageType: gp3
      StorageEncrypted: true
      
      DBName: ai_blockchain_analytics
      MasterUsername: postgres
      MasterUserPassword: !Ref DatabasePassword
      
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      
      BackupRetentionPeriod: 7
      PreferredBackupWindow: "03:00-04:00"
      PreferredMaintenanceWindow: "sun:04:00-sun:05:00"
      
      MultiAZ: !If [IsProduction, true, false]
      PubliclyAccessible: false
      
      MonitoringInterval: 60
      MonitoringRoleArn: !GetAtt RDSEnhancedMonitoringRole.Arn
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: 7
      
      DeletionProtection: !If [IsProduction, true, false]
      
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: ai-blockchain-analytics

  # ElastiCache Redis
  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet group for Redis cluster
      SubnetIds: !Ref PrivateSubnetIds

  RedisCluster:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      ReplicationGroupId: !Sub '${AWS::StackName}-redis'
      Description: Redis cluster for AI Blockchain Analytics
      
      Engine: redis
      EngineVersion: '7.0'
      CacheNodeType: cache.t3.medium
      NumCacheClusters: !If [IsProduction, 3, 1]
      
      Port: 6379
      AuthToken: !Ref RedisPassword
      TransitEncryptionEnabled: true
      AtRestEncryptionEnabled: true
      
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      SecurityGroupIds:
        - !Ref RedisSecurityGroup
      
      PreferredMaintenanceWindow: "sun:03:00-sun:04:00"
      SnapshotRetentionLimit: 5
      SnapshotWindow: "02:00-03:00"
      
      AutomaticFailoverEnabled: !If [IsProduction, true, false]
      MultiAZEnabled: !If [IsProduction, true, false]
      
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: ai-blockchain-analytics

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${AWS::StackName}-alb'
      Scheme: internet-facing
      Type: application
      Subnets: !Ref PublicSubnetIds
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: ai-blockchain-analytics

  # Target Groups
  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-app-tg'
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Tags:
        - Key: Environment
          Value: !Ref Environment

  WebSocketTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-ws-tg'
      Port: 6001
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # ALB Listeners
  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateArn
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: 443
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  WebSocketListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref WebSocketTargetGroup
      Conditions:
        - Field: path-pattern
          Values: ['/ws/*', '/socket.io/*']
      ListenerArn: !Ref HTTPSListener
      Priority: 100

  # IAM Roles
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-ecs-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref ApplicationSecrets

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-ecs-task-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: 
                  - !Sub '${S3Bucket}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Ref S3Bucket
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  RDSEnhancedMonitoringRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: monitoring.rds.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole

  # Secrets Manager
  ApplicationSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}/application'
      Description: Application secrets for AI Blockchain Analytics
      GenerateSecretString:
        SecretStringTemplate: !Sub |
          {
            "DB_HOST": "${PostgreSQLDatabase.Endpoint.Address}",
            "DB_PORT": "5432",
            "DB_DATABASE": "ai_blockchain_analytics",
            "DB_USERNAME": "postgres",
            "DB_PASSWORD": "${DatabasePassword}",
            "REDIS_HOST": "${RedisCluster.PrimaryEndPoint.Address}",
            "REDIS_PORT": "6379",
            "REDIS_PASSWORD": "${RedisPassword}"
          }
        GenerateStringKey: APP_KEY
        PasswordLength: 32
        ExcludeCharacters: '"@/\'

  # S3 Bucket for file storage
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-storage-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7

  # CloudWatch Log Groups
  AppLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${AWS::StackName}/app'
      RetentionInDays: 7

  WorkerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${AWS::StackName}/worker'
      RetentionInDays: 7

  # ECS Task Definitions
  AppTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${AWS::StackName}-app'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 2048
      Memory: 4096
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: roadrunner-app
          Image: !Sub '${ECRRepository}:${ImageTag}'
          Essential: true
          PortMappings:
            - ContainerPort: 8000
              Protocol: tcp
              Name: http
            - ContainerPort: 6001
              Protocol: tcp
              Name: websocket
            - ContainerPort: 2112
              Protocol: tcp
              Name: metrics
          Environment:
            - Name: APP_NAME
              Value: AI Blockchain Analytics
            - Name: APP_ENV
              Value: !Ref Environment
            - Name: APP_DEBUG
              Value: false
            - Name: APP_URL
              Value: !Sub 'https://${DomainName}'
            - Name: LOG_CHANNEL
              Value: stderr
            - Name: CACHE_DRIVER
              Value: redis
            - Name: SESSION_DRIVER
              Value: redis
            - Name: QUEUE_CONNECTION
              Value: redis
            - Name: BROADCAST_DRIVER
              Value: redis
            - Name: CONTAINER_ROLE
              Value: app
            - Name: RR_WORKERS
              Value: '12'
            - Name: RR_MAX_JOBS
              Value: '64'
            - Name: AWS_DEFAULT_REGION
              Value: !Ref 'AWS::Region'
            - Name: AWS_BUCKET
              Value: !Ref S3Bucket
          Secrets:
            - Name: APP_KEY
              ValueFrom: !Sub '${ApplicationSecrets}:APP_KEY::'
            - Name: DB_HOST
              ValueFrom: !Sub '${ApplicationSecrets}:DB_HOST::'
            - Name: DB_PORT
              ValueFrom: !Sub '${ApplicationSecrets}:DB_PORT::'
            - Name: DB_DATABASE
              ValueFrom: !Sub '${ApplicationSecrets}:DB_DATABASE::'
            - Name: DB_USERNAME
              ValueFrom: !Sub '${ApplicationSecrets}:DB_USERNAME::'
            - Name: DB_PASSWORD
              ValueFrom: !Sub '${ApplicationSecrets}:DB_PASSWORD::'
            - Name: REDIS_HOST
              ValueFrom: !Sub '${ApplicationSecrets}:REDIS_HOST::'
            - Name: REDIS_PORT
              ValueFrom: !Sub '${ApplicationSecrets}:REDIS_PORT::'
            - Name: REDIS_PASSWORD
              ValueFrom: !Sub '${ApplicationSecrets}:REDIS_PASSWORD::'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AppLogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: app
          HealthCheck:
            Command:
              - CMD-SHELL
              - 'curl -f http://localhost:8000/health || exit 1'
            Interval: 30
            Timeout: 10
            Retries: 3
            StartPeriod: 60

  WorkerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${AWS::StackName}-worker'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 1024
      Memory: 2048
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: horizon-worker
          Image: !Sub '${ECRRepository}:${ImageTag}'
          Essential: true
          Command:
            - php
            - artisan
            - horizon
          Environment:
            - Name: APP_NAME
              Value: AI Blockchain Analytics
            - Name: APP_ENV
              Value: !Ref Environment
            - Name: APP_DEBUG
              Value: false
            - Name: LOG_CHANNEL
              Value: stderr
            - Name: CACHE_DRIVER
              Value: redis
            - Name: QUEUE_CONNECTION
              Value: redis
            - Name: CONTAINER_ROLE
              Value: worker
            - Name: AWS_DEFAULT_REGION
              Value: !Ref 'AWS::Region'
            - Name: AWS_BUCKET
              Value: !Ref S3Bucket
          Secrets:
            - Name: APP_KEY
              ValueFrom: !Sub '${ApplicationSecrets}:APP_KEY::'
            - Name: DB_HOST
              ValueFrom: !Sub '${ApplicationSecrets}:DB_HOST::'
            - Name: DB_PORT
              ValueFrom: !Sub '${ApplicationSecrets}:DB_PORT::'
            - Name: DB_DATABASE
              ValueFrom: !Sub '${ApplicationSecrets}:DB_DATABASE::'
            - Name: DB_USERNAME
              ValueFrom: !Sub '${ApplicationSecrets}:DB_USERNAME::'
            - Name: DB_PASSWORD
              ValueFrom: !Sub '${ApplicationSecrets}:DB_PASSWORD::'
            - Name: REDIS_HOST
              ValueFrom: !Sub '${ApplicationSecrets}:REDIS_HOST::'
            - Name: REDIS_PORT
              ValueFrom: !Sub '${ApplicationSecrets}:REDIS_PORT::'
            - Name: REDIS_PASSWORD
              ValueFrom: !Sub '${ApplicationSecrets}:REDIS_PASSWORD::'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref WorkerLogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: worker

  # ECS Services
  AppService:
    Type: AWS::ECS::Service
    DependsOn: HTTPSListener
    Properties:
      ServiceName: !Sub '${AWS::StackName}-app'
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref AppTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 3
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets: !Ref PrivateSubnetIds
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: roadrunner-app
          ContainerPort: 8000
          TargetGroupArn: !Ref AppTargetGroup
        - ContainerName: roadrunner-app
          ContainerPort: 6001
          TargetGroupArn: !Ref WebSocketTargetGroup
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      EnableExecuteCommand: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: ai-blockchain-analytics

  WorkerService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub '${AWS::StackName}-worker'
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref WorkerTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets: !Ref PrivateSubnetIds
          AssignPublicIp: DISABLED
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      EnableExecuteCommand: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: ai-blockchain-analytics

  # Auto Scaling
  AppAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 3
      ResourceId: !Sub 'service/${ECSCluster}/${AppService.Name}'
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  AppAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-app-scaling-policy'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AppAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleOutCooldown: 300
        ScaleInCooldown: 300

  # CloudWatch Alarms
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AWS::StackName}-high-cpu'
      AlarmDescription: High CPU utilization
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ServiceName
          Value: !Sub '${AWS::StackName}-app'
        - Name: ClusterName
          Value: !Ref ECSCluster

  HighMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AWS::StackName}-high-memory'
      AlarmDescription: High memory utilization
      MetricName: MemoryUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 85
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ServiceName
          Value: !Sub '${AWS::StackName}-app'
        - Name: ClusterName
          Value: !Ref ECSCluster

  DatabaseConnectionsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AWS::StackName}-db-connections'
      AlarmDescription: High database connections
      MetricName: DatabaseConnections
      Namespace: AWS/RDS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !Ref PostgreSQLDatabase

# Conditions
Conditions:
  IsProduction: !Equals [!Ref Environment, production]

# Outputs
Outputs:
  ClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${AWS::StackName}-cluster-name'

  LoadBalancerDNS:
    Description: Application Load Balancer DNS Name
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-alb-dns'

  ApplicationURL:
    Description: Application URL
    Value: !Sub 'https://${DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-app-url'

  DatabaseEndpoint:
    Description: PostgreSQL Database Endpoint
    Value: !GetAtt PostgreSQLDatabase.Endpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-db-endpoint'

  RedisEndpoint:
    Description: Redis Cluster Endpoint
    Value: !GetAtt RedisCluster.PrimaryEndPoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-redis-endpoint'

  S3BucketName:
    Description: S3 Bucket Name
    Value: !Ref S3Bucket
    Export:
      Name: !Sub '${AWS::StackName}-s3-bucket'

  SecretsManagerArn:
    Description: Secrets Manager ARN
    Value: !Ref ApplicationSecrets
    Export:
      Name: !Sub '${AWS::StackName}-secrets-arn'