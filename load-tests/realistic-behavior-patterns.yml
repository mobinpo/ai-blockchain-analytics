# =============================================================================
# Realistic User Behavior Patterns for AI Blockchain Analytics
# =============================================================================
# This configuration simulates real-world usage patterns with varying
# user types and realistic think times

config:
  target: 'http://localhost:8000'
  
  # Multi-phase realistic load progression
  phases:
    # Morning rush - 7-9 AM equivalent
    - duration: 300
      arrivalRate: 20
      rampTo: 150
      name: "Morning Trading Rush"
    
    # Peak analysis hours - 9-11 AM
    - duration: 600
      arrivalRate: 150
      rampTo: 500
      name: "Peak Analysis Period"
    
    # Sustained heavy usage - 11 AM-1 PM
    - duration: 720
      arrivalRate: 500
      name: "Sustained Heavy Usage"
    
    # Afternoon volatility - 1-3 PM
    - duration: 480
      arrivalRate: 500
      rampTo: 350
      name: "Afternoon Trading"
    
    # Cool down period
    - duration: 180
      arrivalRate: 350
      rampTo: 50
      name: "Market Cool Down"

  # Optimized for high concurrency
  http:
    timeout: 300
    pool: 300
    maxSockets: 2000
    keepAlive: true
    requestIdHeader: 'x-load-test-id'

  # Realistic performance expectations
  ensure:
    - http.request_rate > 200
    - http.response_time.p50 < 2500
    - http.response_time.p95 < 8000
    - http.response_time.p99 < 15000
    - http.codes.200 > 75
    - http.codes.500 < 8

  variables:
    # Realistic crypto portfolio data
    major_cryptos: ["BTC", "ETH", "BNB", "XRP", "ADA", "SOL", "DOGE", "MATIC", "DOT", "AVAX"]
    altcoins: ["LINK", "UNI", "ATOM", "ALGO", "VET", "XTZ", "EGLD", "NEAR", "SAND", "MANA"]
    analysis_depths: ["quick", "standard", "comprehensive", "deep_dive"]
    user_types: ["day_trader", "swing_trader", "hodler", "institutional", "research_analyst"]
    risk_profiles: ["conservative", "moderate", "aggressive", "high_risk"]
    trading_sessions: ["asian", "european", "american", "overnight"]

scenarios:
  # Power User - Heavy Analysis (15% of users, high activity)
  - name: "Power User - Professional Trader"
    weight: 15
    flow:
      # Start with dashboard overview
      - get:
          url: "/dashboard"
          expect:
            - statusCode: [200, 302]
      
      - think: 3
      
      # Multiple concurrent analyses
      - loop:
          count: 3
          over:
            - symbol: "{{ $pick(major_cryptos) }}"
            - symbol: "{{ $pick(altcoins) }}"  
            - symbol: "{{ $pick(major_cryptos) }}"
          flow:
            - post:
                url: "/api/sentiment/analyze"
                headers:
                  'Content-Type': 'application/json'
                json:
                  symbol: "{{ symbol }}"
                  analysis_type: "comprehensive"
                  priority: "high"
                  timeframe: "{{ $pick(['1h', '4h', '1d', '7d']) }}"
                  user_type: "{{ $pick(user_types) }}"
                  sources: ["twitter", "reddit", "news", "telegram"]
                  options:
                    sentiment_threshold: 0.15
                    batch_size: 200
                    include_technical: true
                    risk_profile: "{{ $pick(risk_profiles) }}"
                expect:
                  - statusCode: [200, 201, 202, 422]
                capture:
                  - json: "$.job_id"
                    as: "analysis_job_{{ $loopCount }}"
            
            - think: 1
      
      # Monitor all submitted jobs
      - think: 5
      
      - get:
          url: "/api/sentiment/status/{{ analysis_job_1 }}"
          expect:
            - statusCode: [200, 404]
      
      - think: 2
      
      # Generate comprehensive PDF report
      - post:
          url: "/api/pdf/generate"
          headers:
            'Content-Type': 'application/json'
          json:
            report_type: "portfolio_analysis"
            symbols: ["{{ $pick(major_cryptos) }}", "{{ $pick(altcoins) }}"]
            timeframe: "7d"
            include_charts: true
            include_risk_analysis: true
            format: "comprehensive"
            user_type: "professional"
          expect:
            - statusCode: [200, 201, 202, 422]
      
      - think: 8

  # Regular Trader - Moderate Usage (40% of users)
  - name: "Regular Trader - Daily Analysis"
    weight: 40
    flow:
      # Check dashboard
      - get:
          url: "/dashboard"
          expect:
            - statusCode: [200, 302]
      
      - think: 5
      
      # Single focused analysis
      - post:
          url: "/api/sentiment/analyze"
          headers:
            'Content-Type': 'application/json'
          json:
            symbol: "{{ $pick(major_cryptos) }}"
            analysis_type: "standard"
            priority: "medium"
            timeframe: "{{ $pick(['4h', '1d', '7d']) }}"
            sources: ["twitter", "reddit"]
            options:
              sentiment_threshold: 0.1
              batch_size: 100
              user_type: "{{ $pick(user_types) }}"
          expect:
            - statusCode: [200, 201, 202, 422]
          capture:
            - json: "$.job_id"
              as: "trader_job_id"
      
      - think: 10
      
      # Check job progress
      - get:
          url: "/api/sentiment/status/{{ trader_job_id }}"
          expect:
            - statusCode: [200, 404]
      
      - think: 3
      
      # Get dashboard metrics
      - get:
          url: "/api/dashboard/metrics"
          qs:
            timeframe: "{{ $pick(['1d', '7d']) }}"
            symbols: "{{ $pick(major_cryptos) }}"
          expect:
            - statusCode: [200, 500]
      
      - think: 7

  # Casual User - Light Usage (30% of users)
  - name: "Casual User - Research Mode"
    weight: 30
    flow:
      # Browse main page
      - get:
          url: "/"
          expect:
            - statusCode: [200]
      
      - think: 8
      
      # Simple sentiment check
      - post:
          url: "/api/sentiment/analyze"
          headers:
            'Content-Type': 'application/json'
          json:
            symbol: "{{ $pick(major_cryptos) }}"
            analysis_type: "quick"
            priority: "low"
            timeframe: "1d"
            sources: ["news"]
            options:
              sentiment_threshold: 0.05
              batch_size: 50
          expect:
            - statusCode: [200, 201, 202, 422]
      
      - think: 15
      
      # View recent analyses
      - get:
          url: "/api/analyses/recent"
          qs:
            limit: 5
            type: "sentiment"
          expect:
            - statusCode: [200]
      
      - think: 12

  # Verification User - Badge System (10% of users)
  - name: "Verification User - Credibility Focus"
    weight: 10
    flow:
      # Check verification page
      - get:
          url: "/verification"
          expect:
            - statusCode: [200, 302]
      
      - think: 4
      
      # Submit verification request
      - post:
          url: "/api/verification/submit"
          headers:
            'Content-Type': 'application/json'
          json:
            type: "crypto_expert"
            data:
              expertise_areas: ["{{ $pick(['defi', 'nft', 'trading', 'technical_analysis']) }}"]
              experience_level: "{{ $pick(['intermediate', 'advanced', 'expert']) }}"
              verification_type: "{{ $pick(['standard', 'enhanced']) }}"
            priority: "medium"
          expect:
            - statusCode: [200, 201, 422]
          capture:
            - json: "$.verification_id"
              as: "verification_id"
      
      - think: 6
      
      # Check verification status
      - get:
          url: "/api/verification/status/{{ verification_id }}"
          expect:
            - statusCode: [200, 404]
      
      - think: 3
      
      # Browse verification badges
      - get:
          url: "/api/verification/badges"
          expect:
            - statusCode: [200]

  # API Heavy User - Automated Systems (5% of users)
  - name: "API Heavy User - Automated Trading"
    weight: 5
    flow:
      # Rapid-fire API calls simulating automated trading systems
      - loop:
          count: 5
          over:
            - symbol: "{{ $pick(major_cryptos) }}"
          flow:
            - post:
                url: "/api/sentiment/analyze"
                headers:
                  'Content-Type': 'application/json'
                  'X-API-Client': 'automated-trader'
                json:
                  symbol: "{{ symbol }}"
                  analysis_type: "quick"
                  priority: "high"
                  timeframe: "1h"
                  sources: ["twitter"]
                  options:
                    sentiment_threshold: 0.2
                    batch_size: 50
                    automated: true
                expect:
                  - statusCode: [200, 201, 202, 422, 429]
            
            - think: 0.5
      
      - think: 2
      
      # Bulk status check
      - get:
          url: "/api/analyses/recent"
          qs:
            limit: 20
            automated: true
          expect:
            - statusCode: [200, 429]

# Custom functions for realistic behavior
functions:
  generateRealisticTimestamp: |
    function() {
      const now = Date.now();
      const variations = [
        now - (Math.random() * 1000 * 60),        // Last minute
        now - (Math.random() * 1000 * 60 * 5),    // Last 5 minutes  
        now - (Math.random() * 1000 * 60 * 15),   // Last 15 minutes
        now - (Math.random() * 1000 * 60 * 60),   // Last hour
      ];
      return Math.floor(variations[Math.floor(Math.random() * variations.length)]);
    }
  
  generateTradingSession: |
    function() {
      const hour = new Date().getHours();
      if (hour >= 0 && hour < 6) return "overnight";
      if (hour >= 6 && hour < 14) return "asian";
      if (hour >= 14 && hour < 20) return "european";
      return "american";
    }
  
  generateRiskScore: |
    function() {
      return (Math.random() * 100).toFixed(2);
    }

# Enhanced monitoring
plugins:
  - name: "@artilleryio/plugin-metrics-by-endpoint"
    config:
      details: true
      
  - name: "@artilleryio/plugin-expect"
    
  - name: "artillery-plugin-statsd" 
    config:
      host: "localhost"
      port: 8125
      prefix: "artillery.realistic_behavior"

# Post-test summary
after:
  flow:
    - log: "🎯 Realistic behavior pattern test completed"
    - log: "Simulated real-world usage with 500 concurrent analyses"
    - log: "Check reports for user behavior insights"