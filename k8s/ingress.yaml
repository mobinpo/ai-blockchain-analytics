apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: laravel-app-ingress
  namespace: ai-blockchain-analytics
  annotations:
    # AWS ALB Controller annotations
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/group.name: ai-blockchain-analytics
    
    # SSL configuration
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:us-east-1:YOUR_ACCOUNT:certificate/YOUR_CERT_ID"
    
    # Health check configuration
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '30'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '3'
    
    # Load balancing
    alb.ingress.kubernetes.io/load-balancer-attributes: |
      idle_timeout.timeout_seconds=60
      routing.http2.enabled=true
      access_logs.s3.enabled=true
      access_logs.s3.bucket=your-alb-logs-bucket
      access_logs.s3.prefix=ai-blockchain-analytics
    
    # Security headers
    alb.ingress.kubernetes.io/actions.response-headers: |
      {
        "type": "fixed-response",
        "fixedResponseConfig": {
          "contentType": "text/plain",
          "statusCode": "200",
          "messageBody": "OK"
        },
        "responseHeaders": {
          "X-Content-Type-Options": "nosniff",
          "X-Frame-Options": "DENY",
          "X-XSS-Protection": "1; mode=block",
          "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
          "Referrer-Policy": "strict-origin-when-cross-origin",
          "Content-Security-Policy": "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'"
        }
      }
spec:
  rules:
    - host: analytics.yourdomain.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: laravel-app-service
                port:
                  number: 80
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: laravel-app-service
                port:
                  number: 80
---
# Alternative NGINX Ingress configuration (comment out ALB if using this)
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: laravel-app-nginx-ingress
#   namespace: ai-blockchain-analytics
#   annotations:
#     kubernetes.io/ingress.class: nginx
#     nginx.ingress.kubernetes.io/ssl-redirect: "true"
#     nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
#     cert-manager.io/cluster-issuer: "letsencrypt-prod"
#     
#     # Rate limiting
#     nginx.ingress.kubernetes.io/rate-limit: "100"
#     nginx.ingress.kubernetes.io/rate-limit-window: "1m"
#     
#     # Security headers
#     nginx.ingress.kubernetes.io/configuration-snippet: |
#       add_header X-Frame-Options "DENY" always;
#       add_header X-Content-Type-Options "nosniff" always;
#       add_header X-XSS-Protection "1; mode=block" always;
#       add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
#       add_header Referrer-Policy "strict-origin-when-cross-origin" always;
#       
#     # Client max body size for file uploads
#     nginx.ingress.kubernetes.io/proxy-body-size: "10m"
#     
#     # Timeout configuration
#     nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
#     nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
#     nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
# spec:
#   tls:
#     - hosts:
#         - analytics.yourdomain.com
#       secretName: analytics-tls
#   rules:
#     - host: analytics.yourdomain.com
#       http:
#         paths:
#           - path: /
#             pathType: Prefix
#             backend:
#               service:
#                 name: laravel-app-service
#                 port:
#                   number: 80
---
apiVersion: v1
kind: Service
metadata:
  name: browserless-service
  namespace: ai-blockchain-analytics
  labels:
    app: browserless
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
  selector:
    app: browserless
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: browserless
  namespace: ai-blockchain-analytics
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: browserless
  template:
    metadata:
      labels:
        app: browserless
    spec:
      containers:
        - name: browserless
          image: ghcr.io/browserless/chromium:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
              name: http
          env:
            - name: CONCURRENT
              value: "10"
            - name: TOKEN
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: BROWSERLESS_TOKEN
                  optional: true
            - name: MAX_CONCURRENT_SESSIONS
              value: "10"
            - name: QUEUE_LENGTH
              value: "100"
            - name: PREBOOT_CHROME
              value: "true"
            - name: KEEP_ALIVE
              value: "true"
            - name: CHROME_REFRESH_TIME
              value: "0"
          livenessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 30
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "2Gi"
              cpu: "1000m"
---
# MailHog for development/testing email capture
apiVersion: v1
kind: Service
metadata:
  name: mailhog-service
  namespace: ai-blockchain-analytics
  labels:
    app: mailhog
spec:
  type: ClusterIP
  ports:
    - name: smtp
      port: 1025
      targetPort: 1025
      protocol: TCP
    - name: http
      port: 8025
      targetPort: 8025
      protocol: TCP
  selector:
    app: mailhog
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mailhog
  namespace: ai-blockchain-analytics
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mailhog
  template:
    metadata:
      labels:
        app: mailhog
    spec:
      containers:
        - name: mailhog
          image: mailhog/mailhog:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 1025
              name: smtp
            - containerPort: 8025
              name: http
          env:
            - name: MH_STORAGE
              value: "maildir"
            - name: MH_MAILDIR_PATH
              value: "/tmp"
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "256Mi"
              cpu: "200m"