// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0; // Intentionally using older version

/**
 * @title IntegerOverflowVulnerable
 * @dev Contract vulnerable to integer overflow/underflow
 * Before Solidity 0.8.0 automatic overflow checks
 */
contract IntegerOverflowVulnerable {
    mapping(address => uint256) public balances;
    uint256 public totalSupply;
    
    constructor() public {
        totalSupply = 1000000;
        balances[msg.sender] = totalSupply;
    }
    
    // VULNERABILITY: No overflow protection
    function transfer(address to, uint256 amount) public {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        
        // VULNERABILITY: Can overflow if amount is very large
        balances[to] += amount;
        balances[msg.sender] -= amount;
    }
    
    // VULNERABILITY: Can cause underflow
    function burn(uint256 amount) public {
        // No check if amount > balances[msg.sender]
        balances[msg.sender] -= amount;
        totalSupply -= amount;
    }
    
    // VULNERABILITY: Multiplication overflow
    function calculateReward(uint256 amount) public pure returns (uint256) {
        uint256 multiplier = 1000000;
        return amount * multiplier; // Can overflow
    }
}
