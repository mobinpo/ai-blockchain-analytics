services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: ci
    container_name: ai_blockchain_ci_app
    working_dir: /var/www
    environment:
      APP_ENV: testing
      APP_DEBUG: "false"
      APP_KEY: "base64:k8S3i3x0qLJvCT6F3B7MlRzJh7TwF9kT6D2C8S6f7g8="
      APP_URL: http://localhost:8000
      DB_CONNECTION: pgsql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: testing
      DB_USERNAME: postgres
      DB_PASSWORD: password
      REDIS_CLIENT: predis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      QUEUE_CONNECTION: sync
      CACHE_DRIVER: array
      SESSION_DRIVER: array
      MAIL_MAILER: array
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ci_network

  postgres:
    image: postgres:16-alpine
    container_name: ai_blockchain_ci_postgres
    environment:
      POSTGRES_DB: testing
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_ci_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d testing"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - ci_network

  redis:
    image: redis:7-alpine
    container_name: ai_blockchain_ci_redis
    command: redis-server --save "" --appendonly no --maxmemory 128mb
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - ci_network

networks:
  ci_network:
    driver: bridge

volumes:
  postgres_ci_data:
    driver: local