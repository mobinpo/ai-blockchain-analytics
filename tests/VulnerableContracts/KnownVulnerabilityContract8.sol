// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/**
 * @title DenialOfServiceVulnerable
 * @dev Contract vulnerable to various DoS attacks
 * Based on gas limit DoS and unexpected revert patterns
 */
contract DenialOfServiceVulnerable {
    address[] public participants;
    mapping(address => uint256) public contributions;
    address public beneficiary;
    uint256 public goal;
    bool public goalReached;
    
    constructor(address _beneficiary, uint256 _goal) {
        beneficiary = _beneficiary;
        goal = _goal;
    }
    
    function contribute() public payable {
        require(msg.value > 0, "Must contribute something");
        contributions[msg.sender] += msg.value;
        participants.push(msg.sender);
        
        if (address(this).balance >= goal) {
            goalReached = true;
        }
    }
    
    // VULNERABILITY: Gas limit DoS - unbounded loop
    function refundAll() public {
        require(!goalReached, "Goal was reached");
        
        // VULNERABILITY: Loop can consume all gas if participants array is large
        for (uint256 i = 0; i < participants.length; i++) {
            address participant = participants[i];
            uint256 amount = contributions[participant];
            
            if (amount > 0) {
                contributions[participant] = 0;
                payable(participant).transfer(amount);
            }
        }
    }
    
    // VULNERABILITY: External call in loop
    function distributeRewards(uint256[] calldata amounts) public {
        require(goalReached, "Goal not reached");
        require(amounts.length == participants.length, "Array length mismatch");
        
        // VULNERABILITY: One failing external call can block all distributions
        for (uint256 i = 0; i < participants.length; i++) {
            payable(participants[i]).transfer(amounts[i]); // Can revert and block others
        }
    }
    
    // VULNERABILITY: Unexpected revert in critical function
    mapping(address => bool) public authorized;
    
    function authorize(address user) public {
        require(msg.sender == beneficiary, "Only beneficiary");
        authorized[user] = true;
    }
    
    function criticalOperation() public {
        require(authorized[msg.sender], "Not authorized");
        
        // VULNERABILITY: Complex external call that can fail and block the function
        (bool success, ) = beneficiary.call{gas: 2300}("");
        require(success, "Call failed"); // Strict requirement can cause DoS
        
        // Critical operation logic here
    }
    
    // VULNERABILITY: Block gas limit DoS
    uint256[] public largeArray;
    
    function populateArray(uint256 size) public {
        // VULNERABILITY: Can create arrays that consume too much gas to iterate
        for (uint256 i = 0; i < size; i++) {
            largeArray.push(i);
        }
    }
    
    function processArray() public view returns (uint256) {
        uint256 sum = 0;
        // VULNERABILITY: Processing large array can hit gas limit
        for (uint256 i = 0; i < largeArray.length; i++) {
            sum += largeArray[i];
        }
        return sum;
    }
}
