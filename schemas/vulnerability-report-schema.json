{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://ai-blockchain-analytics.com/schemas/vulnerability-report.json",
  "title": "Smart Contract Vulnerability Report Schema",
  "description": "OWASP-compliant JSON schema for blockchain smart contract security vulnerability reporting",
  "type": "object",
  "required": ["id", "severity", "title", "category", "description", "contract_address"],
  "properties": {
    "id": {
      "type": "string",
      "description": "Unique identifier for the vulnerability finding",
      "pattern": "^[A-Z]{2,4}-[0-9]{4}-[0-9]{6}$",
      "example": "REEN-2025-000125"
    },
    "severity": {
      "type": "string",
      "enum": ["CRITICAL", "HIGH", "MEDIUM", "LOW", "INFO"],
      "description": "OWASP-compliant severity level based on CVSS scoring"
    },
    "cvss_score": {
      "type": "number",
      "minimum": 0.0,
      "maximum": 10.0,
      "description": "Common Vulnerability Scoring System score (0.0-10.0)"
    },
    "title": {
      "type": "string",
      "maxLength": 200,
      "description": "Brief, descriptive title of the vulnerability",
      "examples": ["Reentrancy Attack Vector", "Integer Overflow in Transfer", "Access Control Bypass"]
    },
    "category": {
      "type": "string",
      "enum": [
        "REENTRANCY",
        "ACCESS_CONTROL", 
        "ARITHMETIC_OVERFLOW",
        "FRONT_RUNNING",
        "DENIAL_OF_SERVICE",
        "UNCHECKED_CALL",
        "GAS_LIMIT",
        "TIMESTAMP_DEPENDENCE",
        "RANDOMNESS_WEAKNESS",
        "SIGNATURE_REPLAY",
        "LOGIC_ERROR",
        "CENTRALIZATION_RISK",
        "UPGRADE_VULNERABILITY",
        "TOKEN_STANDARD_VIOLATION",
        "FLASH_LOAN_ATTACK",
        "MEV_VULNERABILITY",
        "ORACLE_MANIPULATION"
      ],
      "description": "Standardized vulnerability category based on SWC registry and OWASP Smart Contract Top 10"
    },
    "swc_id": {
      "type": "string",
      "pattern": "^SWC-[0-9]{3}$",
      "description": "Smart Contract Weakness Classification ID",
      "example": "SWC-107"
    },
    "cwe_id": {
      "type": "string", 
      "pattern": "^CWE-[0-9]+$",
      "description": "Common Weakness Enumeration ID",
      "example": "CWE-362"
    },
    "description": {
      "type": "string",
      "minLength": 50,
      "maxLength": 2000,
      "description": "Detailed technical description of the vulnerability"
    },
    "contract_address": {
      "type": "string",
      "pattern": "^0x[a-fA-F0-9]{40}$",
      "description": "Ethereum contract address (42 characters with 0x prefix)"
    },
    "contract_name": {
      "type": "string",
      "maxLength": 100,
      "description": "Human-readable contract name"
    },
    "network": {
      "type": "string",
      "enum": ["ethereum", "polygon", "bsc", "arbitrum", "optimism", "avalanche", "fantom", "testnet"],
      "default": "ethereum"
    },
    "location": {
      "type": "object",
      "properties": {
        "line": {
          "type": "integer",
          "minimum": 1,
          "description": "Line number where vulnerability occurs"
        },
        "column": {
          "type": "integer",
          "minimum": 1,
          "description": "Column number (optional)"
        },
        "function_name": {
          "type": "string",
          "description": "Name of the vulnerable function"
        },
        "contract_section": {
          "type": "string",
          "enum": ["constructor", "function", "modifier", "event", "struct", "mapping", "state_variable"],
          "description": "Type of contract section containing the vulnerability"
        }
      },
      "required": ["line"]
    },
    "code_snippet": {
      "type": "object",
      "properties": {
        "vulnerable_code": {
          "type": "string",
          "description": "Actual vulnerable code excerpt"
        },
        "context_before": {
          "type": "string",
          "description": "Code context before vulnerable section"
        },
        "context_after": {
          "type": "string", 
          "description": "Code context after vulnerable section"
        },
        "highlighted_lines": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Array of line numbers to highlight"
        }
      }
    },
    "impact": {
      "type": "object",
      "properties": {
        "financial_loss": {
          "type": "boolean",
          "description": "Can lead to financial loss"
        },
        "data_exposure": {
          "type": "boolean", 
          "description": "Can expose sensitive data"
        },
        "service_disruption": {
          "type": "boolean",
          "description": "Can disrupt service availability"
        },
        "reputation_damage": {
          "type": "boolean",
          "description": "Can cause reputation damage"
        },
        "estimated_loss": {
          "type": "object",
          "properties": {
            "min_eth": {"type": "number", "minimum": 0},
            "max_eth": {"type": "number", "minimum": 0},
            "min_usd": {"type": "number", "minimum": 0},
            "max_usd": {"type": "number", "minimum": 0}
          }
        }
      }
    },
    "exploitability": {
      "type": "object",
      "properties": {
        "difficulty": {
          "type": "string",
          "enum": ["TRIVIAL", "EASY", "MODERATE", "HARD", "VERY_HARD"]
        },
        "prerequisites": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Prerequisites for successful exploitation"
        },
        "attack_vector": {
          "type": "string",
          "enum": ["LOCAL", "ADJACENT_NETWORK", "NETWORK", "PHYSICAL"]
        },
        "public_exploit_available": {
          "type": "boolean"
        }
      }
    },
    "recommendation": {
      "type": "object",
      "properties": {
        "summary": {
          "type": "string",
          "maxLength": 500,
          "description": "Brief remediation summary"
        },
        "detailed_steps": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Step-by-step remediation instructions"
        },
        "code_fix": {
          "type": "string",
          "description": "Suggested code fix or patch"
        },
        "best_practices": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Related security best practices"
        }
      },
      "required": ["summary"]
    },
    "references": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["OWASP", "SWC", "CWE", "CVE", "BLOG", "DOCUMENTATION", "RESEARCH_PAPER", "AUDIT_REPORT"]
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": ["type", "url", "title"]
      }
    },
    "detection": {
      "type": "object",
      "properties": {
        "tool_name": {
          "type": "string",
          "description": "Name of detection tool/analyzer"
        },
        "tool_version": {
          "type": "string"
        },
        "detection_method": {
          "type": "string",
          "enum": ["STATIC_ANALYSIS", "DYNAMIC_ANALYSIS", "FUZZING", "FORMAL_VERIFICATION", "MANUAL_REVIEW"]
        },
        "confidence_level": {
          "type": "string",
          "enum": ["HIGH", "MEDIUM", "LOW"]
        },
        "false_positive_likelihood": {
          "type": "string",
          "enum": ["VERY_LOW", "LOW", "MEDIUM", "HIGH", "VERY_HIGH"]
        }
      }
    },
    "metadata": {
      "type": "object",
      "properties": {
        "discovered_at": {
          "type": "string",
          "format": "date-time",
          "description": "ISO 8601 timestamp of discovery"
        },
        "reported_by": {
          "type": "string",
          "description": "Reporter/researcher name or identifier"
        },
        "analysis_duration": {
          "type": "integer",
          "description": "Analysis duration in seconds"
        },
        "blockchain_height": {
          "type": "integer",
          "description": "Blockchain height at time of analysis"
        },
        "gas_used": {
          "type": "integer",
          "description": "Gas used in vulnerable function (if applicable)"
        },
        "transaction_hash": {
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{64}$",
          "description": "Related transaction hash (if applicable)"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Additional categorization tags"
        }
      }
    },
    "verification": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["UNVERIFIED", "VERIFIED", "FALSE_POSITIVE", "DUPLICATE", "WONT_FIX"]
        },
        "verified_by": {
          "type": "string"
        },
        "verification_date": {
          "type": "string",
          "format": "date-time"
        },
        "verification_notes": {
          "type": "string"
        }
      }
    }
  },
  "examples": [
    {
      "id": "REEN-2025-000125",
      "severity": "HIGH",
      "cvss_score": 8.5,
      "title": "Reentrancy Attack in Withdrawal Function",
      "category": "REENTRANCY",
      "swc_id": "SWC-107",
      "cwe_id": "CWE-362",
      "description": "The withdrawal function allows for reentrancy attacks due to external call before state update. An attacker can recursively call the withdraw function to drain contract funds before balance is updated.",
      "contract_address": "0x1234567890abcdef1234567890abcdef12345678",
      "contract_name": "VulnerableBank",
      "network": "ethereum",
      "location": {
        "line": 125,
        "function_name": "withdraw",
        "contract_section": "function"
      },
      "code_snippet": {
        "vulnerable_code": "msg.sender.call.value(amount)(\"\");\nbalances[msg.sender] -= amount;",
        "context_before": "function withdraw(uint256 amount) public {\n    require(balances[msg.sender] >= amount);",
        "context_after": "    emit Withdrawal(msg.sender, amount);\n}",
        "highlighted_lines": [125, 126]
      },
      "impact": {
        "financial_loss": true,
        "data_exposure": false,
        "service_disruption": true,
        "reputation_damage": true,
        "estimated_loss": {
          "min_eth": 100,
          "max_eth": 10000,
          "min_usd": 250000,
          "max_usd": 25000000
        }
      },
      "exploitability": {
        "difficulty": "EASY",
        "prerequisites": ["Contract balance > 0", "Attacker has initial deposit"],
        "attack_vector": "NETWORK",
        "public_exploit_available": true
      },
      "recommendation": {
        "summary": "Implement checks-effects-interactions pattern: update state before external calls",
        "detailed_steps": [
          "Move balance update before external call",
          "Add reentrancy guard modifier",
          "Use transfer() instead of call.value()",
          "Implement withdrawal limits"
        ],
        "code_fix": "balances[msg.sender] -= amount;\nmsg.sender.transfer(amount);",
        "best_practices": [
          "Always follow checks-effects-interactions pattern",
          "Use OpenZeppelin's ReentrancyGuard",
          "Prefer transfer() over call.value()"
        ]
      },
      "references": [
        {
          "type": "SWC",
          "url": "https://swcregistry.io/docs/SWC-107",
          "title": "SWC-107: Reentrancy",
          "description": "Smart Contract Weakness Classification for reentrancy vulnerabilities"
        },
        {
          "type": "OWASP",
          "url": "https://owasp.org/www-project-smart-contract-top-10/",
          "title": "OWASP Smart Contract Top 10",
          "description": "OWASP top 10 smart contract vulnerabilities"
        }
      ],
      "detection": {
        "tool_name": "AI Blockchain Analytics",
        "tool_version": "2.1.0",
        "detection_method": "STATIC_ANALYSIS",
        "confidence_level": "HIGH",
        "false_positive_likelihood": "VERY_LOW"
      },
      "metadata": {
        "discovered_at": "2025-08-06T19:45:23Z",
        "reported_by": "security-analyzer-ai",
        "analysis_duration": 45,
        "blockchain_height": 18750000,
        "gas_used": 21000,
        "tags": ["defi", "withdrawal", "critical-path"]
      },
      "verification": {
        "status": "VERIFIED",
        "verified_by": "senior-auditor",
        "verification_date": "2025-08-06T20:15:30Z",
        "verification_notes": "Confirmed through manual code review and test case reproduction"
      }
    }
  ]
}