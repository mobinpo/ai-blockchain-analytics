name: CI

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

jobs:
  # Build and cache Docker image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and cache Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: ci
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/ci-image.tar

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: ci-image
          path: /tmp/ci-image.tar
          retention-days: 1

  # Code style check with Pint
  pint:
    name: Code Style (Pint)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: ci-image
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/ci-image.tar

      - name: Run Laravel Pint
        run: |
          docker run --rm \
            $(docker images --format "table {{.Repository}}:{{.Tag}}" | grep -v REPOSITORY | head -1) \
            vendor/bin/pint --test --verbose

  # Static analysis with Psalm
  psalm:
    name: Static Analysis (Psalm)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: ci-image
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/ci-image.tar

      - name: Download Psalm
        run: |
          docker run --rm \
            -v $(pwd):/tmp/download \
            $(docker images --format "table {{.Repository}}:{{.Tag}}" | grep -v REPOSITORY | head -1) \
            sh -c "curl -Ls https://github.com/vimeo/psalm/releases/latest/download/psalm.phar -o /tmp/download/psalm.phar && chmod +x /tmp/download/psalm.phar"

      - name: Run Psalm
        run: |
          docker run --rm \
            -v $(pwd)/psalm.phar:/var/www/psalm.phar \
            $(docker images --format "table {{.Repository}}:{{.Tag}}" | grep -v REPOSITORY | head -1) \
            php psalm.phar --no-cache --output-format=github

  # PHPUnit tests
  phpunit:
    name: PHPUnit Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: ci-image
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/ci-image.tar

      - name: Start services and run tests
        run: |
          # Start the CI stack
          docker compose -f docker-compose.ci.yml up -d postgres redis
          
          # Wait for services to be ready
          docker compose -f docker-compose.ci.yml exec -T postgres sh -c 'until pg_isready -U postgres; do sleep 1; done'
          docker compose -f docker-compose.ci.yml exec -T redis sh -c 'until redis-cli ping; do sleep 1; done'
          
          # Run migrations and tests
          docker compose -f docker-compose.ci.yml run --rm app sh -c "
            php artisan key:generate --force &&
            php artisan migrate --force &&
            vendor/bin/phpunit --testdox --colors=always --coverage-text
          "

      - name: Cleanup
        if: always()
        run: docker compose -f docker-compose.ci.yml down -v

  # Feature tests (if you have browser tests)
  feature:
    name: Feature Tests
    runs-on: ubuntu-latest
    needs: build
    if: false # Enable this when you have feature tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: ci-image
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/ci-image.tar

      - name: Run Feature Tests
        run: |
          docker compose -f docker-compose.ci.yml up -d
          docker compose -f docker-compose.ci.yml exec -T app vendor/bin/phpunit --group=feature

      - name: Cleanup
        if: always()
        run: docker compose -f docker-compose.ci.yml down -v 