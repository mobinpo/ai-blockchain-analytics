// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/**
 * @title AccessControlVulnerable
 * @dev Contract with broken access control
 * Based on common authorization bypass patterns
 */
contract AccessControlVulnerable {
    address public owner;
    mapping(address => bool) public admins;
    uint256 public criticalValue;
    
    constructor() {
        owner = msg.sender;
    }
    
    // VULNERABILITY: Weak access control check
    function setOwner(address newOwner) public {
        // Anyone can become owner if they know the pattern
        require(msg.sender == owner || admins[msg.sender], "Not authorized");
        owner = newOwner;
    }
    
    // VULNERABILITY: Missing access control
    function addAdmin(address admin) public {
        // No access control - anyone can add admins
        admins[admin] = true;
    }
    
    // VULNERABILITY: Logic error in access control
    function setCriticalValue(uint256 value) public {
        // Wrong comparison operator - should be == not !=
        require(msg.sender != owner, "Only owner can set"); // BUG: inverted logic
        criticalValue = value;
    }
    
    // VULNERABILITY: tx.origin instead of msg.sender
    function emergencyWithdraw() public {
        require(tx.origin == owner, "Not owner"); // Vulnerable to phishing
        payable(owner).transfer(address(this).balance);
    }
    
    receive() external payable {}
}
