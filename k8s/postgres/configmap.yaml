apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: ai-blockchain-analytics
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database-config
data:
  01-init-extensions.sql: |
    -- Enable required PostgreSQL extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    CREATE EXTENSION IF NOT EXISTS "btree_gin";
    CREATE EXTENSION IF NOT EXISTS "btree_gist";
    
    -- Create additional indexes for JSONB performance
    -- These will be created by Laravel migrations, but can be optimized here
    
  02-create-database.sql: |
    -- Create application database if it doesn't exist
    SELECT 'CREATE DATABASE ai_blockchain_analytics'
    WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'ai_blockchain_analytics')\gexec
    
    -- Create test database for testing
    SELECT 'CREATE DATABASE ai_blockchain_analytics_test'
    WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'ai_blockchain_analytics_test')\gexec
  
  03-performance-tuning.sql: |
    -- Performance tuning for AI Blockchain Analytics workload
    
    -- Optimize for JSONB operations (used heavily by crawler and cache)
    ALTER SYSTEM SET shared_preload_libraries = 'pg_stat_statements';
    ALTER SYSTEM SET track_activity_query_size = 2048;
    ALTER SYSTEM SET pg_stat_statements.track = 'all';
    ALTER SYSTEM SET pg_stat_statements.max = 10000;
    
    -- Memory settings (adjust based on available memory)
    ALTER SYSTEM SET shared_buffers = '256MB';
    ALTER SYSTEM SET effective_cache_size = '1GB';
    ALTER SYSTEM SET work_mem = '4MB';
    ALTER SYSTEM SET maintenance_work_mem = '64MB';
    
    -- Connection settings
    ALTER SYSTEM SET max_connections = 200;
    ALTER SYSTEM SET max_prepared_transactions = 100;
    
    -- WAL settings for better performance
    ALTER SYSTEM SET wal_buffers = '16MB';
    ALTER SYSTEM SET checkpoint_completion_target = 0.9;
    ALTER SYSTEM SET checkpoint_timeout = '10min';
    
    -- Parallel query settings
    ALTER SYSTEM SET max_worker_processes = 8;
    ALTER SYSTEM SET max_parallel_workers = 8;
    ALTER SYSTEM SET max_parallel_workers_per_gather = 4;
    ALTER SYSTEM SET max_parallel_maintenance_workers = 4;
    
    -- Reload configuration
    SELECT pg_reload_conf();
  
  backup.sh: |
    #!/bin/bash
    set -e
    
    # Database backup script
    BACKUP_DIR="/backup"
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    BACKUP_FILE="ai_blockchain_analytics_backup_${TIMESTAMP}.sql"
    
    echo "Starting database backup at $(date)"
    
    # Create backup directory if it doesn't exist
    mkdir -p ${BACKUP_DIR}
    
    # Perform backup
    pg_dump -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB} \
        --verbose --clean --create --if-exists \
        --format=custom --compress=9 \
        --file=${BACKUP_DIR}/${BACKUP_FILE}
    
    # Verify backup
    if [ -f "${BACKUP_DIR}/${BACKUP_FILE}" ]; then
        echo "Backup completed successfully: ${BACKUP_FILE}"
        echo "Backup size: $(du -h ${BACKUP_DIR}/${BACKUP_FILE} | cut -f1)"
    else
        echo "Backup failed!"
        exit 1
    fi
    
    # Clean up old backups (keep last 7 days)
    find ${BACKUP_DIR} -name "*.sql" -type f -mtime +7 -delete
    
    echo "Backup cleanup completed"
  
  restore.sh: |
    #!/bin/bash
    set -e
    
    # Database restore script
    BACKUP_DIR="/backup"
    BACKUP_FILE="$1"
    
    if [ -z "$BACKUP_FILE" ]; then
        echo "Usage: $0 <backup_file>"
        echo "Available backups:"
        ls -la ${BACKUP_DIR}/*.sql 2>/dev/null || echo "No backups found"
        exit 1
    fi
    
    if [ ! -f "${BACKUP_DIR}/${BACKUP_FILE}" ]; then
        echo "Backup file not found: ${BACKUP_DIR}/${BACKUP_FILE}"
        exit 1
    fi
    
    echo "Starting database restore from ${BACKUP_FILE} at $(date)"
    
    # Restore database
    pg_restore -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB} \
        --verbose --clean --if-exists \
        ${BACKUP_DIR}/${BACKUP_FILE}
    
    echo "Database restore completed successfully"
