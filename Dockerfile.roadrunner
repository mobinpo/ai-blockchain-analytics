# AI Blockchain Analytics - RoadRunner Optimized Dockerfile
# Multi-stage build for production optimization

# ================================
# Stage 1: Base image with PHP 8.3
# ================================
FROM php:8.3-fpm-alpine AS base

# Build arguments
ARG ENVIRONMENT=production
ARG BUILD_DATE
ARG VCS_REF

# Labels for metadata
LABEL maintainer="AI Blockchain Analytics Team" \
      org.opencontainers.image.title="AI Blockchain Analytics" \
      org.opencontainers.image.description="Blockchain analytics platform with RoadRunner" \
      org.opencontainers.image.version="${VCS_REF}" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.source="https://github.com/ai-blockchain-analytics" \
      org.opencontainers.image.revision="${VCS_REF}"

# Install system dependencies
RUN apk add --no-cache \
    nginx \
    supervisor \
    curl \
    wget \
    unzip \
    git \
    bash \
    postgresql-client \
    postgresql-dev \
    redis \
    libzip-dev \
    libpng-dev \
    libjpeg-turbo-dev \
    freetype-dev \
    oniguruma-dev \
    libxml2-dev \
    libpq-dev \
    icu-dev \
    autoconf \
    g++ \
    make \
    linux-headers

# Install PHP extensions
RUN docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install -j$(nproc) \
        pdo \
        pdo_pgsql \
        pgsql \
        zip \
        gd \
        mbstring \
        xml \
        curl \
        fileinfo \
        intl \
        bcmath \
        opcache \
        sockets \
        pcntl \
        posix

# Install Redis extension
RUN pecl install redis \
    && docker-php-ext-enable redis

# Install Composer
COPY --from=composer:2.7 /usr/bin/composer /usr/bin/composer

# ================================
# Stage 2: Node.js for frontend
# ================================
FROM node:24-alpine AS frontend

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY vite.config.js ./
COPY tailwind.config.js ./
COPY postcss.config.js ./

# Install dependencies
RUN npm ci --only=production

# Copy source files
COPY resources/ ./resources/
COPY public/ ./public/

# Build frontend assets
RUN npm run build

# ================================
# Stage 3: RoadRunner binary
# ================================
FROM alpine:3.22 AS roadrunner

# Install RoadRunner
RUN wget -O rr.tar.gz https://github.com/roadrunner-server/roadrunner/releases/latest/download/roadrunner-linux-amd64.tar.gz \
    && tar -xzf rr.tar.gz \
    && chmod +x rr \
    && mv rr /usr/local/bin/rr

# ================================
# Stage 4: Production application
# ================================
FROM base AS production

# Set working directory
WORKDIR /app

# Create app user
RUN addgroup -g 1000 -S appgroup \
    && adduser -u 1000 -S appuser -G appgroup

# PHP configuration
COPY docker/php/php-prod.ini /usr/local/etc/php/conf.d/app.ini
COPY docker/php/opcache.ini /usr/local/etc/php/conf.d/opcache.ini

# Copy RoadRunner binary
COPY --from=roadrunner /usr/local/bin/rr /usr/local/bin/rr

# Copy Composer files
COPY composer.json composer.lock ./

# Install PHP dependencies
RUN composer install \
    --no-dev \
    --optimize-autoloader \
    --no-scripts \
    --no-progress \
    --prefer-dist \
    && composer clear-cache

# Copy application code
COPY . .

# Copy built frontend assets
COPY --from=frontend /app/public/build ./public/build

# Create RoadRunner configuration
COPY .rr.yaml ./.rr.yaml

# Set permissions
RUN chown -R appuser:appgroup /app \
    && chmod -R 755 /app \
    && chmod -R 775 /app/storage \
    && chmod -R 775 /app/bootstrap/cache

# Run post-install scripts
RUN composer run-script post-autoload-dump \
    && php artisan config:cache \
    && php artisan route:cache \
    && php artisan view:cache

# Health check script
COPY docker/scripts/healthcheck.sh /usr/local/bin/healthcheck
RUN chmod +x /usr/local/bin/healthcheck

# Switch to app user
USER appuser

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD /usr/local/bin/healthcheck

# Default command
CMD ["/usr/local/bin/rr", "serve", "-c", "/app/.rr.yaml"]

# ================================
# Stage 5: Worker image
# ================================
FROM production AS worker

# Switch back to root for configuration
USER root

# Worker-specific configuration
COPY docker/supervisor/worker.conf /etc/supervisor/conf.d/worker.conf

# Switch back to app user
USER appuser

# Default command for workers
CMD ["php", "artisan", "horizon"]

# ================================
# Stage 6: Scheduler image
# ================================
FROM production AS scheduler

# Switch back to root for configuration
USER root

# Scheduler-specific configuration
COPY docker/supervisor/scheduler.conf /etc/supervisor/conf.d/scheduler.conf

# Switch back to app user
USER appuser

# Default command for scheduler
CMD ["php", "artisan", "schedule:work"]

# ================================
# Stage 7: Development image
# ================================
FROM base AS development

# Install Xdebug
RUN pecl install xdebug \
    && docker-php-ext-enable xdebug

# Development PHP configuration
COPY docker/php/php-dev.ini /usr/local/etc/php/conf.d/app.ini
COPY docker/xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini

# Install Node.js for development
RUN apk add --no-cache nodejs npm

# Set working directory
WORKDIR /app

# Copy RoadRunner binary
COPY --from=roadrunner /usr/local/bin/rr /usr/local/bin/rr

# Copy Composer files
COPY composer.json composer.lock ./

# Install all dependencies (including dev)
RUN composer install \
    --optimize-autoloader \
    --no-scripts \
    --no-progress \
    --prefer-dist

# Copy application code
COPY . .

# Copy RoadRunner configuration
COPY .rr.dev.yaml ./.rr.yaml

# Set permissions
RUN chown -R www-data:www-data /app \
    && chmod -R 755 /app \
    && chmod -R 775 /app/storage \
    && chmod -R 775 /app/bootstrap/cache

# Install frontend dependencies
RUN npm install

# Expose ports
EXPOSE 8080 9003

# Development command
CMD ["/usr/local/bin/rr", "serve", "-c", "/app/.rr.yaml"]