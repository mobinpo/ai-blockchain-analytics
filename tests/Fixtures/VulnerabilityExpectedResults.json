{
  "regression_test_suite": {
    "version": "1.0",
    "description": "Expected vulnerability detection results for 10 known vulnerable smart contracts",
    "test_contracts": {
      "ReentrancyAttack.sol": {
        "contract_name": "ReentrancyAttack",
        "vulnerability_category": "Reentrancy",
        "severity": "Critical",
        "expected_findings": [
          {
            "vulnerability_type": "Reentrancy",
            "severity": "Critical",
            "location": "withdraw function",
            "line_range": [14, 23],
            "description": "External call before state update allows reentrancy attack",
            "cwe": "CWE-284",
            "confidence": "High",
            "impact": "Funds can be drained through reentrancy",
            "remediation": "Use checks-effects-interactions pattern or reentrancy guard"
          },
          {
            "vulnerability_type": "State Change After External Call",
            "severity": "High",
            "location": "withdraw function",
            "line_range": [22, 22],
            "description": "Balance updated after external call",
            "confidence": "High"
          }
        ],
        "expected_severity_count": {
          "Critical": 1,
          "High": 1,
          "Medium": 0,
          "Low": 0
        }
      },
      "IntegerOverflow.sol": {
        "contract_name": "IntegerOverflow",
        "vulnerability_category": "Arithmetic",
        "severity": "High",
        "expected_findings": [
          {
            "vulnerability_type": "Integer Overflow",
            "severity": "High",
            "location": "transfer function",
            "line_range": [18, 18],
            "description": "Addition operation can overflow",
            "cwe": "CWE-190",
            "confidence": "High"
          },
          {
            "vulnerability_type": "Integer Underflow",
            "severity": "High",
            "location": "withdraw function", 
            "line_range": [25, 25],
            "description": "Subtraction operation can underflow",
            "cwe": "CWE-191",
            "confidence": "High"
          },
          {
            "vulnerability_type": "Unchecked Arithmetic",
            "severity": "Medium",
            "location": "calculateReward function",
            "line_range": [31, 31],
            "description": "Multiplication without overflow check",
            "confidence": "High"
          },
          {
            "vulnerability_type": "Division by Zero",
            "severity": "Medium",
            "location": "divide function",
            "line_range": [37, 37],
            "description": "Division operation without zero check",
            "confidence": "High"
          }
        ],
        "expected_severity_count": {
          "Critical": 0,
          "High": 2,
          "Medium": 2,
          "Low": 0
        }
      },
      "AccessControl.sol": {
        "contract_name": "AccessControl",
        "vulnerability_category": "Access Control",
        "severity": "Critical",
        "expected_findings": [
          {
            "vulnerability_type": "Missing Access Control",
            "severity": "Critical",
            "location": "changeOwner function",
            "line_range": [21, 24],
            "description": "Critical function lacks access control modifier",
            "cwe": "CWE-284",
            "confidence": "High"
          },
          {
            "vulnerability_type": "Missing Access Control",
            "severity": "Critical", 
            "location": "mintTokens function",
            "line_range": [33, 36],
            "description": "Token minting without access restrictions",
            "confidence": "High"
          },
          {
            "vulnerability_type": "tx.origin Authentication",
            "severity": "High",
            "location": "sensitiveOperation function",
            "line_range": [49, 49],
            "description": "Using tx.origin for authentication is unsafe",
            "confidence": "High"
          },
          {
            "vulnerability_type": "Missing Access Control",
            "severity": "Critical",
            "location": "criticalFunction function", 
            "line_range": [55, 58],
            "description": "Self-destruct function without access control",
            "confidence": "High"
          }
        ],
        "expected_severity_count": {
          "Critical": 3,
          "High": 1,
          "Medium": 0,
          "Low": 0
        }
      },
      "UnprotectedSelfDestruct.sol": {
        "contract_name": "UnprotectedSelfDestruct",
        "vulnerability_category": "Self-Destruct",
        "severity": "Critical",
        "expected_findings": [
          {
            "vulnerability_type": "Unprotected Self-Destruct",
            "severity": "Critical",
            "location": "kill function",
            "line_range": [23, 26],
            "description": "Self-destruct without access control",
            "cwe": "CWE-284",
            "confidence": "High"
          },
          {
            "vulnerability_type": "Weak Authentication",
            "severity": "High",
            "location": "emergencyDestruct function",
            "line_range": [29, 33],
            "description": "Weak password protection for self-destruct",
            "confidence": "High"
          },
          {
            "vulnerability_type": "Hidden Self-Destruct",
            "severity": "Critical",
            "location": "fallback function",
            "line_range": [36, 42],
            "description": "Self-destruct in fallback function",
            "confidence": "Medium"
          },
          {
            "vulnerability_type": "Logic Bomb",
            "severity": "High",
            "location": "processTransaction function",
            "line_range": [49, 49],
            "description": "Hidden self-destruct condition",
            "confidence": "Medium"
          }
        ],
        "expected_severity_count": {
          "Critical": 2,
          "High": 2,
          "Medium": 0,
          "Low": 0
        }
      },
      "WeakRandomness.sol": {
        "contract_name": "WeakRandomness",
        "vulnerability_category": "Randomness",
        "severity": "High",
        "expected_findings": [
          {
            "vulnerability_type": "Weak Randomness",
            "severity": "High",
            "location": "lottery1 function",
            "line_range": [24, 24],
            "description": "Using block.timestamp for randomness",
            "cwe": "CWE-338",
            "confidence": "High"
          },
          {
            "vulnerability_type": "Weak Randomness",
            "severity": "High", 
            "location": "lottery2 function",
            "line_range": [35, 35],
            "description": "Using block.difficulty for randomness",
            "confidence": "High"
          },
          {
            "vulnerability_type": "Weak Randomness",
            "severity": "High",
            "location": "lottery3 function", 
            "line_range": [46, 46],
            "description": "Using block.number for randomness",
            "confidence": "High"
          },
          {
            "vulnerability_type": "Blockhash Misuse",
            "severity": "Medium",
            "location": "lottery5 function",
            "line_range": [69, 69],
            "description": "blockhash(block.number) always returns 0",
            "confidence": "High"
          },
          {
            "vulnerability_type": "Predictable Nonce",
            "severity": "Medium",
            "location": "lottery7 function",
            "line_range": [93, 94],
            "description": "Predictable nonce for randomness",
            "confidence": "High"
          }
        ],
        "expected_severity_count": {
          "Critical": 0,
          "High": 3,
          "Medium": 2,
          "Low": 0
        }
      },
      "UncheckedExternalCall.sol": {
        "contract_name": "UncheckedExternalCall",
        "vulnerability_category": "External Calls",
        "severity": "High",
        "expected_findings": [
          {
            "vulnerability_type": "Unchecked Call Return Value",
            "severity": "High",
            "location": "withdrawUnchecked function",
            "line_range": [23, 23],
            "description": "External call return value not checked",
            "cwe": "CWE-252",
            "confidence": "High"
          },
          {
            "vulnerability_type": "Unchecked Send Return Value",
            "severity": "High",
            "location": "withdrawSend function",
            "line_range": [33, 33],
            "description": "send() return value not checked",
            "confidence": "High"
          },
          {
            "vulnerability_type": "Unchecked External Call",
            "severity": "Medium",
            "location": "batchTransfer function",
            "line_range": [41, 41],
            "description": "External calls in loop without checking success",
            "confidence": "High"
          },
          {
            "vulnerability_type": "Unchecked Delegatecall",
            "severity": "High",
            "location": "proxyCall function",
            "line_range": [49, 49],
            "description": "Delegatecall return value not verified",
            "confidence": "High"
          }
        ],
        "expected_severity_count": {
          "Critical": 0,
          "High": 3,
          "Medium": 1,
          "Low": 0
        }
      },
      "FrontRunning.sol": {
        "contract_name": "FrontRunning",
        "vulnerability_category": "MEV/Front-Running",
        "severity": "Medium",
        "expected_findings": [
          {
            "vulnerability_type": "Price Manipulation",
            "severity": "High",
            "location": "updatePrice function",
            "line_range": [25, 31],
            "description": "Price update vulnerable to front-running",
            "cwe": "CWE-362",
            "confidence": "Medium"
          },
          {
            "vulnerability_type": "Front-Running Vulnerability",
            "severity": "Medium",
            "location": "buyTokens function",
            "line_range": [34, 39],
            "description": "Token purchase can be front-run",
            "confidence": "Medium"
          },
          {
            "vulnerability_type": "Auction Front-Running",
            "severity": "Medium",
            "location": "placeBid function",
            "line_range": [43, 54],
            "description": "Bid amounts visible in mempool",
            "confidence": "Medium"
          },
          {
            "vulnerability_type": "MEV Extraction",
            "severity": "Medium",
            "location": "arbitrageSwap function",
            "line_range": [73, 81],
            "description": "Arbitrage opportunity visible to MEV bots",
            "confidence": "Medium"
          }
        ],
        "expected_severity_count": {
          "Critical": 0,
          "High": 1,
          "Medium": 3,
          "Low": 0
        }
      },
      "DenialOfService.sol": {
        "contract_name": "DenialOfService",
        "vulnerability_category": "Denial of Service",
        "severity": "High",
        "expected_findings": [
          {
            "vulnerability_type": "Gas Limit DoS",
            "severity": "High",
            "location": "distributeRewards function",
            "line_range": [22, 26],
            "description": "Unbounded loop can cause gas limit DoS",
            "cwe": "CWE-400",
            "confidence": "High"
          },
          {
            "vulnerability_type": "External Call DoS",
            "severity": "High",
            "location": "refundAll function",
            "line_range": [30, 41],
            "description": "External calls can block entire refund process",
            "confidence": "High"
          },
          {
            "vulnerability_type": "External Call DoS",
            "severity": "High",
            "location": "bid function",
            "line_range": [45, 54],
            "description": "Bidding can be blocked by rejecting transfers",
            "confidence": "High"
          },
          {
            "vulnerability_type": "Unbounded Loop",
            "severity": "Medium",
            "location": "addParticipants function",
            "line_range": [58, 66],
            "description": "Unbounded array operations",
            "confidence": "High"
          }
        ],
        "expected_severity_count": {
          "Critical": 0,
          "High": 3,
          "Medium": 1,
          "Low": 0
        }
      },
      "TimestampDependence.sol": {
        "contract_name": "TimestampDependence",
        "vulnerability_category": "Timestamp Dependence",
        "severity": "Medium",
        "expected_findings": [
          {
            "vulnerability_type": "Timestamp Dependence",
            "severity": "Medium",
            "location": "enterLottery function",
            "line_range": [36, 37],
            "description": "Time-based logic can be manipulated by miners",
            "cwe": "CWE-367",
            "confidence": "High"
          },
          {
            "vulnerability_type": "Weak Randomness",
            "severity": "High",
            "location": "selectWinner function",
            "line_range": [46, 47],
            "description": "Using timestamp for winner selection",
            "confidence": "High"
          },
          {
            "vulnerability_type": "Time-based Access Control",
            "severity": "Medium",
            "location": "emergencyWithdraw function",
            "line_range": [56, 56],
            "description": "Emergency access based on manipulatable timestamp",
            "confidence": "Medium"
          },
          {
            "vulnerability_type": "Timestamp Dependence",
            "severity": "Medium",
            "location": "getDynamicPrice function",
            "line_range": [88, 93],
            "description": "Price calculation depends on timestamp",
            "confidence": "Medium"
          }
        ],
        "expected_severity_count": {
          "Critical": 0,
          "High": 1,
          "Medium": 3,
          "Low": 0
        }
      },
      "FlashLoanAttack.sol": {
        "contract_name": "FlashLoanAttack",
        "vulnerability_category": "Flash Loan Attack",
        "severity": "Critical", 
        "expected_findings": [
          {
            "vulnerability_type": "Price Manipulation",
            "severity": "Critical",
            "location": "updatePrice function",
            "line_range": [49, 53],
            "description": "Price oracle vulnerable to flash loan manipulation",
            "cwe": "CWE-841",
            "confidence": "High"
          },
          {
            "vulnerability_type": "Governance Attack",
            "severity": "Critical",
            "location": "vote function",
            "line_range": [70, 80],
            "description": "Voting power based on current balance allows flash loan attacks",
            "confidence": "High"
          },
          {
            "vulnerability_type": "Liquidity Manipulation",
            "severity": "High",
            "location": "swapAForB function",
            "line_range": [92, 99],
            "description": "AMM vulnerable to flash loan sandwich attacks",
            "confidence": "High"
          },
          {
            "vulnerability_type": "Flash Loan Callback Validation",
            "severity": "High",
            "location": "onFlashLoan function",
            "line_range": [135, 155],
            "description": "Flash loan callback lacks proper validation",
            "confidence": "Medium"
          }
        ],
        "expected_severity_count": {
          "Critical": 2,
          "High": 2,
          "Medium": 0,
          "Low": 0
        }
      }
    },
    "test_metadata": {
      "total_contracts": 10,
      "total_expected_findings": 39,
      "severity_distribution": {
        "Critical": 8,
        "High": 16, 
        "Medium": 13,
        "Low": 0
      },
      "vulnerability_categories": [
        "Reentrancy",
        "Arithmetic",
        "Access Control",
        "Self-Destruct",
        "Randomness",
        "External Calls", 
        "MEV/Front-Running",
        "Denial of Service",
        "Timestamp Dependence",
        "Flash Loan Attack"
      ],
      "confidence_levels": {
        "High": 32,
        "Medium": 7,
        "Low": 0
      }
    },
    "test_criteria": {
      "minimum_detection_rate": 0.85,
      "critical_detection_rate": 0.95,
      "high_detection_rate": 0.90,
      "false_positive_tolerance": 0.10,
      "confidence_threshold": "Medium"
    }
  }
}